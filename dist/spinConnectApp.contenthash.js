/*! For license information please see spinConnectApp.contenthash.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={194:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),l=n.n(o)()(a());l.push([e.id,".AK58fHz1PZChjUPhgjKA {\n\tgrid-row: AppMgmt;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground-color: #7c7b7b;\n\tfont-family: Orbitron;\n}\n\n.TwV6E2O6aA0rM3CXPwrO {\n\tdisplay: flex;\n\tflex-direction: column;\n\tfont-size: 2.5rem;\n\tmax-height: 13.5rem;\n\tbackground-color: slategray;\n}\n\n.NhFz1atQz7Nk2nSl1rZw {\n\tdisplay: flex;\n\tflex-direction: column;\n\n\theight: 3.5rem;\n\ttransition: height 0.75s;\n\tbackground-color: lightslategray;\n}\n\n.NhFz1atQz7Nk2nSl1rZw:hover  {\n\theight: 10rem;\n}\n\n.XhQ8el7N2qsT8vzBswYo {\n\tdisplay: flex;\n\tflex-direction: row;\n\theight: 3.4rem%;\n}\n\n.XhQ8el7N2qsT8vzBswYo p {\n\tdisplay: flex;\n\talign-items: center;\n\theight: 3.5rem;\n\tmin-width: 16rem;\n\tfont-size: 2rem;\n\tmargin-left: .5rem;\n}\n\n.nKLTwGF8UeG_tea98ZYJ {\n\tflex-grow: 1;\n\tfont-size: 1.5rem;\n}\n\n.iFniBPlc5MyjW8T1cMtc {\n\theight: 3.5rem;\n}\n\n.iFniBPlc5MyjW8T1cMtc p {\n\tfont-size: 1rem;\n}\n\n.K3lsJsLjWXSC_IP1FAT0 {\n\t\n}\n\n.K3lsJsLjWXSC_IP1FAT0 p {\n\tfont-size: 1rem;\n}\n\n._RUAQ2FpqVz8aveMIhsr {\n\theight: 3.5rem;\n\tbackground-color: steelblue;\n\ttransition: height 0.75s;\n}\n\n._RUAQ2FpqVz8aveMIhsr:hover {\n\theight: 10rem;\n}\n\n.izoqgdADRbYnHE7O4qMQ {\n\n}\n\n\n\n.nN9vmcc18HdLzZz2VW7L {\n\tflex-grow: 1;\n\tbackground-color: blue;\n}","",{version:3,sources:["webpack://./src/pages/App/components/AppMgmt/style.module.css"],names:[],mappings:"AAAA;CACC,iBAAiB;CACjB,aAAa;CACb,sBAAsB;CACtB,yBAAyB;CACzB,qBAAqB;AACtB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,iBAAiB;CACjB,mBAAmB;CACnB,2BAA2B;AAC5B;;AAEA;CACC,aAAa;CACb,sBAAsB;;CAEtB,cAAc;CACd,wBAAwB;CACxB,gCAAgC;AACjC;;AAEA;CACC,aAAa;AACd;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,eAAe;AAChB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,cAAc;CACd,gBAAgB;CAChB,eAAe;CACf,kBAAkB;AACnB;;AAEA;CACC,YAAY;CACZ,iBAAiB;AAClB;;AAEA;CACC,cAAc;AACf;;AAEA;CACC,eAAe;AAChB;;AAEA;;AAEA;;AAEA;CACC,eAAe;AAChB;;AAEA;CACC,cAAc;CACd,2BAA2B;CAC3B,wBAAwB;AACzB;;AAEA;CACC,aAAa;AACd;;AAEA;;AAEA;;;;AAIA;CACC,YAAY;CACZ,sBAAsB;AACvB",sourcesContent:[".appMgmtContainer {\n\tgrid-row: AppMgmt;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground-color: #7c7b7b;\n\tfont-family: Orbitron;\n}\n\n.mgmtOperationsContainer {\n\tdisplay: flex;\n\tflex-direction: column;\n\tfont-size: 2.5rem;\n\tmax-height: 13.5rem;\n\tbackground-color: slategray;\n}\n\n.appMgmt {\n\tdisplay: flex;\n\tflex-direction: column;\n\n\theight: 3.5rem;\n\ttransition: height 0.75s;\n\tbackground-color: lightslategray;\n}\n\n.appMgmt:hover  {\n\theight: 10rem;\n}\n\n.mgmtPreview {\n\tdisplay: flex;\n\tflex-direction: row;\n\theight: 3.4rem%;\n}\n\n.mgmtPreview p {\n\tdisplay: flex;\n\talign-items: center;\n\theight: 3.5rem;\n\tmin-width: 16rem;\n\tfont-size: 2rem;\n\tmargin-left: .5rem;\n}\n\n.mgmtOptionsContainer {\n\tflex-grow: 1;\n\tfont-size: 1.5rem;\n}\n\n.activeOptions {\n\theight: 3.5rem;\n}\n\n.activeOptions p {\n\tfont-size: 1rem;\n}\n\n.inactiveOptions {\n\t\n}\n\n.inactiveOptions p {\n\tfont-size: 1rem;\n}\n\n.mgmtControls {\n\theight: 3.5rem;\n\tbackground-color: steelblue;\n\ttransition: height 0.75s;\n}\n\n.mgmtControls:hover {\n\theight: 10rem;\n}\n\n.spinUpBtn {\n\n}\n\n\n\n.collectionContainer {\n\tflex-grow: 1;\n\tbackground-color: blue;\n}"],sourceRoot:""}]),l.locals={appMgmtContainer:"AK58fHz1PZChjUPhgjKA",mgmtOperationsContainer:"TwV6E2O6aA0rM3CXPwrO",appMgmt:"NhFz1atQz7Nk2nSl1rZw",mgmtPreview:"XhQ8el7N2qsT8vzBswYo",mgmtOptionsContainer:"nKLTwGF8UeG_tea98ZYJ",activeOptions:"iFniBPlc5MyjW8T1cMtc",inactiveOptions:"K3lsJsLjWXSC_IP1FAT0",mgmtControls:"_RUAQ2FpqVz8aveMIhsr",spinUpBtn:"izoqgdADRbYnHE7O4qMQ",collectionContainer:"nN9vmcc18HdLzZz2VW7L"};const i=l},930:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),l=n.n(o)()(a());l.push([e.id,".EGdpDimRaudufYKeZJOW {\n\tdisplay: flex;\n\tflex-direction: column;\n\tborder: 0.1rem solid red;\n}\n\n.XXSRSkG7CZzhngX3nZqn {\n\tmin-height: 5rem;\n\tbackground-color: #666666;\n}\n\n.undKoQ5kSZzD4rTJgbFV {\n\n}\n\n.cqBfOtsZcEKS52IA97jc {\n\tflex-grow: 1;\n\tdisplay: grid;\n\tgrid-template-columns: repeat(4, auto);\n\tjustify-content: space-evenly;\n\toverflow-x: scroll;\n\tpadding-top: 0.5rem;\n}\n\n.cqBfOtsZcEKS52IA97jc {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n  justify-content: center;\n\theight: 30rem;\n\twidth: 20rem;\n\tfont-size: 1.5rem;\n\tbackground-color: aliceblue;\n  border-radius: 0.5rem;\n  margin: 0.5rem auto;\n  padding-top: .5rem;\n}\n\n.qVWbfSOPvkWgOltATrSb {\n\n}\n\n.bIDNTsrf8cVSWWFhADQ3:hover {\n\ttransform: scale(1.025);\n\tbackground-color: #c4c4c4;\n}\n\n.pNCAFG8dWrLvUhitp1WP {\n\tborder: 0.10rem solid black;\n\tborder-radius: 0.25rem;\n\theight: 10rem;\n\twidth: 90%;\n\tmargin: auto;\n\tfont-size: 1.5rem;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-evenly;\n\talign-items: center;\n\ttext-align: center;\n}\n\n.pYQBZE4p__6dOBLnpFbq {\n\n}\n\n.mvRe97HAcnZCgB5GSPLJ {\n\tdisplay: flex;\n\talign-items: center;\n  justify-content: center;\n  margin: auto;\n}\n\n.ZQuOTIVFBJLkYq1Dp053 {\n\twidth: 90%;\n\tborder-radius: .5rem;\n}\n\n.FsYtX9_izkjIUzvkv2Gf {\n\n}","",{version:3,sources:["webpack://./src/pages/App/components/Collection/style.module.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,sBAAsB;CACtB,wBAAwB;AACzB;;AAEA;CACC,gBAAgB;CAChB,yBAAyB;AAC1B;;AAEA;;AAEA;;AAEA;CACC,YAAY;CACZ,aAAa;CACb,sCAAsC;CACtC,6BAA6B;CAC7B,kBAAkB;CAClB,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,mBAAmB;EAClB,uBAAuB;CACxB,aAAa;CACb,YAAY;CACZ,iBAAiB;CACjB,2BAA2B;EAC1B,qBAAqB;EACrB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;;AAEA;;AAEA;CACC,uBAAuB;CACvB,yBAAyB;AAC1B;;AAEA;CACC,2BAA2B;CAC3B,sBAAsB;CACtB,aAAa;CACb,UAAU;CACV,YAAY;CACZ,iBAAiB;CACjB,aAAa;CACb,sBAAsB;CACtB,6BAA6B;CAC7B,mBAAmB;CACnB,kBAAkB;AACnB;;AAEA;;AAEA;;AAEA;CACC,aAAa;CACb,mBAAmB;EAClB,uBAAuB;EACvB,YAAY;AACd;;AAEA;CACC,UAAU;CACV,oBAAoB;AACrB;;AAEA;;AAEA",sourcesContent:[".collectionContainer {\n\tdisplay: flex;\n\tflex-direction: column;\n\tborder: 0.1rem solid red;\n}\n\n.collectionNavigation {\n\tmin-height: 5rem;\n\tbackground-color: #666666;\n}\n\n.fetchCollectionBtn {\n\n}\n\n.spinCardContainer {\n\tflex-grow: 1;\n\tdisplay: grid;\n\tgrid-template-columns: repeat(4, auto);\n\tjustify-content: space-evenly;\n\toverflow-x: scroll;\n\tpadding-top: 0.5rem;\n}\n\n.spinCardContainer {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n  justify-content: center;\n\theight: 30rem;\n\twidth: 20rem;\n\tfont-size: 1.5rem;\n\tbackground-color: aliceblue;\n  border-radius: 0.5rem;\n  margin: 0.5rem auto;\n  padding-top: .5rem;\n}\n\n.noDataFound {\n\n}\n\n.spinCard:hover {\n\ttransform: scale(1.025);\n\tbackground-color: #c4c4c4;\n}\n\n.spinCardInfo {\n\tborder: 0.10rem solid black;\n\tborder-radius: 0.25rem;\n\theight: 10rem;\n\twidth: 90%;\n\tmargin: auto;\n\tfont-size: 1.5rem;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-evenly;\n\talign-items: center;\n\ttext-align: center;\n}\n\n.spinCardAlbumName {\n\n}\n\n.spinCardAlbumTitle {\n\tdisplay: flex;\n\talign-items: center;\n  justify-content: center;\n  margin: auto;\n}\n\n.spinCardAlbumImg {\n\twidth: 90%;\n\tborder-radius: .5rem;\n}\n\n.spinCardYear {\n\n}"],sourceRoot:""}]),l.locals={collectionContainer:"EGdpDimRaudufYKeZJOW",collectionNavigation:"XXSRSkG7CZzhngX3nZqn",fetchCollectionBtn:"undKoQ5kSZzD4rTJgbFV",spinCardContainer:"cqBfOtsZcEKS52IA97jc",noDataFound:"qVWbfSOPvkWgOltATrSb",spinCard:"bIDNTsrf8cVSWWFhADQ3",spinCardInfo:"pNCAFG8dWrLvUhitp1WP",spinCardAlbumName:"pYQBZE4p__6dOBLnpFbq",spinCardAlbumTitle:"mvRe97HAcnZCgB5GSPLJ",spinCardAlbumImg:"ZQuOTIVFBJLkYq1Dp053",spinCardYear:"FsYtX9_izkjIUzvkv2Gf"};const i=l},30:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),l=n.n(o)()(a());l.push([e.id,".ny9lTAOn8J1pYf94dKc8 {\n\tgrid-row: Header;\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-wrap: nowrap;\n\tjustify-content: flex-end;\n\tbackground-color: darkgray;\n}\n\n.CCPWNE_5Sw2Xc6I4YrN8 {\n\tflex-grow: 1;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-family: Audiowide;\n\tfont-size: 2.5rem;\n}\n\n.jBmyvcPcv2IomJdzbqTA {\n  width: 12rem;\n  border-left: .16rem solid black;\n  border-bottom: .16rem solid black;\n  font-family: Orbitron;\n}\n\n.Zi7mCRzU34HgiuOYZbeH {\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\talign-items: center;\n\theight: 100%;\n}\n\n.Zi7mCRzU34HgiuOYZbeH p  {\n\tfont-size: 1.2rem;\n\theight: 1.5rem;\n}\n\n.LFfwh3AzlhoXc6u3UluQ {\n\tflex-grow: 1;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-size: 3rem;\n}","",{version:3,sources:["webpack://./src/pages/App/components/Header/style.module.css"],names:[],mappings:"AAAA;CACC,gBAAgB;CAChB,aAAa;CACb,mBAAmB;CACnB,iBAAiB;CACjB,yBAAyB;CACzB,0BAA0B;AAC3B;;AAEA;CACC,YAAY;CACZ,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,sBAAsB;CACtB,iBAAiB;AAClB;;AAEA;EACE,YAAY;EACZ,+BAA+B;EAC/B,iCAAiC;EACjC,qBAAqB;AACvB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,uBAAuB;CACvB,mBAAmB;CACnB,YAAY;AACb;;AAEA;CACC,iBAAiB;CACjB,cAAc;AACf;;AAEA;CACC,YAAY;CACZ,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,eAAe;AAChB",sourcesContent:[".headerContainer {\n\tgrid-row: Header;\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-wrap: nowrap;\n\tjustify-content: flex-end;\n\tbackground-color: darkgray;\n}\n\n.headerTitle {\n\tflex-grow: 1;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-family: Audiowide;\n\tfont-size: 2.5rem;\n}\n\n.loginStatusContainer {\n  width: 12rem;\n  border-left: .16rem solid black;\n  border-bottom: .16rem solid black;\n  font-family: Orbitron;\n}\n\n.isLoggedInContainer {\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\talign-items: center;\n\theight: 100%;\n}\n\n.isLoggedInContainer p  {\n\tfont-size: 1.2rem;\n\theight: 1.5rem;\n}\n\n.activeUserName {\n\tflex-grow: 1;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-size: 3rem;\n}"],sourceRoot:""}]),l.locals={headerContainer:"ny9lTAOn8J1pYf94dKc8",headerTitle:"CCPWNE_5Sw2Xc6I4YrN8",loginStatusContainer:"jBmyvcPcv2IomJdzbqTA",isLoggedInContainer:"Zi7mCRzU34HgiuOYZbeH",activeUserName:"LFfwh3AzlhoXc6u3UluQ"};const i=l},542:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),l=n.n(o)()(a());l.push([e.id,".spinConnect-login-portal-container {\n\t\n}","",{version:3,sources:["webpack://./src/pages/LoginPortal/index.style.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".spinConnect-login-portal-container {\n\t\n}"],sourceRoot:""}]);const i=l},777:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(537),a=n.n(r),o=n(645),l=n.n(o),i=n(667),u=n.n(i),s=new URL(n(950),n.b),c=new URL(n(126),n.b),d=new URL(n(13),n.b),f=l()(a()),p=u()(s),h=u()(c),m=u()(d);f.push([e.id,`@font-face {\n\tfont-family: Audiowide;\n\tsrc: url(${p});\n}\n\n@font-face {\n\tfont-family: Laila_reg;\n\tsrc: url(${h});\n}\n\n@font-face {\n\tfont-family: Orbitron;\n\tsrc: url(${m});\n}\n\n:root {\n\t--ac-sand: \t\t\t\t\t#F7DE8D;\n\t--ac-orange:\t\t\t\t#FBB040;\n\t--ac-green: \t\t\t\t#AAC27E;\n\t--ac-green-opaque: \t#AAC27E69;\n\t--ac-blue:\t\t\t\t\t#9FCFCA;\n\t--ac-brown: \t\t\t\t#594A42;\n}\n\n*,\n*:before,\n*:after {\n\tmargin: 0;\n\tbox-sizing: inherit;\n}\n\nhtml {\n\tfont-size: 62.5%;\n}\n\nhtml, body {\n\tbox-sizing: border-box;\n\toverflow: auto;\n}\n\nbody {\n}`,"",{version:3,sources:["webpack://./src/root.style.css"],names:[],mappings:"AAAA;CACC,sBAAsB;CACtB,4CAA0D;AAC3D;;AAEA;CACC,sBAAsB;CACtB,4CAAkD;AACnD;;AAEA;CACC,qBAAqB;CACrB,4CAAkE;AACnE;;AAEA;CACC,uBAAuB;CACvB,uBAAuB;CACvB,uBAAuB;CACvB,6BAA6B;CAC7B,sBAAsB;CACtB,uBAAuB;AACxB;;AAEA;;;CAGC,SAAS;CACT,mBAAmB;AACpB;;AAEA;CACC,gBAAgB;AACjB;;AAEA;CACC,sBAAsB;CACtB,cAAc;AACf;;AAEA;AACA",sourcesContent:["@font-face {\n\tfont-family: Audiowide;\n\tsrc: url('./assets/fonts/Audiowide/Audiowide-Regular.ttf');\n}\n\n@font-face {\n\tfont-family: Laila_reg;\n\tsrc: url('./assets/fonts/Laila/Laila-Regular.ttf');\n}\n\n@font-face {\n\tfont-family: Orbitron;\n\tsrc: url('./assets/fonts/Orbitron/Orbitron-VariableFont_wght.ttf');\n}\n\n:root {\n\t--ac-sand: \t\t\t\t\t#F7DE8D;\n\t--ac-orange:\t\t\t\t#FBB040;\n\t--ac-green: \t\t\t\t#AAC27E;\n\t--ac-green-opaque: \t#AAC27E69;\n\t--ac-blue:\t\t\t\t\t#9FCFCA;\n\t--ac-brown: \t\t\t\t#594A42;\n}\n\n*,\n*:before,\n*:after {\n\tmargin: 0;\n\tbox-sizing: inherit;\n}\n\nhtml {\n\tfont-size: 62.5%;\n}\n\nhtml, body {\n\tbox-sizing: border-box;\n\toverflow: auto;\n}\n\nbody {\n}"],sourceRoot:""}]);const v=f},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(l[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&l[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},448:(e,t,n)=>{var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,i={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(i[e]=t,e=0;e<t.length;e++)l.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,o,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=l}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,A=Symbol.for("react.element"),C=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),_=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),B=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),z=Symbol.for("react.memo"),L=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function D(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var O,M=Object.assign;function F(e){if(void 0===O)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);O=t&&t[1]||""}return"\n"+O+e}var U=!1;function I(e,t){if(!e||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),l=a.length-1,i=o.length-1;1<=l&&0<=i&&a[l]!==o[i];)i--;for(;1<=l&&0<=i;l--,i--)if(a[l]!==o[i]){if(1!==l||1!==i)do{if(l--,0>--i||a[l]!==o[i]){var u="\n"+a[l].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=l&&0<=i);break}}}finally{U=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?F(e):""}function j(e){switch(e.tag){case 5:return F(e.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return I(e.type,!1);case 11:return I(e.type.render,!1);case 1:return I(e.type,!0);default:return""}}function H(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case C:return"Portal";case E:return"Profiler";case S:return"StrictMode";case B:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case z:return null!==(t=e.displayName||null)?t:H(e.type)||"Memo";case L:t=e._payload,e=e._init;try{return H(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return H(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function G(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Y(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function oe(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ge=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Ae(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,ke=null,Se=null;function Ee(e){if(e=ba(e)){if("function"!=typeof Ce)throw Error(o(280));var t=e.stateNode;t&&(t=Aa(t),Ce(e.stateNode,e.type,t))}}function xe(e){ke?Se?Se.push(e):Se=[e]:ke=e}function _e(){if(ke){var e=ke,t=Se;if(Se=ke=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Pe(e,t){return e(t)}function Be(){}var Te=!1;function ze(e,t,n){if(Te)return e(t,n);Te=!0;try{return Pe(e,t,n)}finally{Te=!1,(null!==ke||null!==Se)&&(Be(),_e())}}function Le(e,t){var n=e.stateNode;if(null===n)return null;var r=Aa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Re=!1;if(c)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(ce){Re=!1}function De(e,t,n,r,a,o,l,i,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Oe=!1,Me=null,Fe=!1,Ue=null,Ie={onError:function(e){Oe=!0,Me=e}};function je(e,t,n,r,a,o,l,i,u){Oe=!1,Me=null,De.apply(Ie,arguments)}function He(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(He(e)!==e)throw Error(o(188))}function $e(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=He(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return Ve(a),e;if(l===r)return Ve(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i){for(u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Qe(e):null}function Qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Qe(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Ye=a.unstable_cancelCallback,Ze=a.unstable_shouldYield,Ke=a.unstable_requestPaint,Xe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ge=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,lt=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(it(e)/ut|0)|0},it=Math.log,ut=Math.LN2,st=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,l=268435455&n;if(0!==l){var i=l&~a;0!==i?r=dt(i):0!=(o&=l)&&(r=dt(o))}else 0!=(l=n&~a)?r=dt(l):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-lt(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-lt(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var At,Ct,kt,St,Et,xt=!1,_t=[],Pt=null,Bt=null,Tt=null,zt=new Map,Lt=new Map,Rt=[],Nt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Bt=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":zt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lt.delete(t.pointerId)}}function Ot(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&Ct(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Mt(e){var t=ya(e.target);if(null!==t){var n=He(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void Et(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&Ct(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ut(e,t,n){Ft(e)&&n.delete(t)}function It(){xt=!1,null!==Pt&&Ft(Pt)&&(Pt=null),null!==Bt&&Ft(Bt)&&(Bt=null),null!==Tt&&Ft(Tt)&&(Tt=null),zt.forEach(Ut),Lt.forEach(Ut)}function jt(e,t){e.blockedOn===t&&(e.blockedOn=null,xt||(xt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,It)))}function Ht(e){function t(t){return jt(t,e)}if(0<_t.length){jt(_t[0],e);for(var n=1;n<_t.length;n++){var r=_t[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&jt(Pt,e),null!==Bt&&jt(Bt,e),null!==Tt&&jt(Tt,e),zt.forEach(t),Lt.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)Mt(n),null===n.blockedOn&&Rt.shift()}var Wt=w.ReactCurrentBatchConfig,Vt=!0;function $t(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function Qt(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function qt(e,t,n,r){if(Vt){var a=Zt(e,t,n,r);if(null===a)Vr(e,t,r,Yt,n),Dt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Pt=Ot(Pt,e,t,n,r,a),!0;case"dragenter":return Bt=Ot(Bt,e,t,n,r,a),!0;case"mouseover":return Tt=Ot(Tt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return zt.set(o,Ot(zt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Lt.set(o,Ot(Lt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Dt(e,r),4&t&&-1<Nt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&At(o),null===(o=Zt(e,t,n,r))&&Vr(e,t,r,Yt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Yt=null;function Zt(e,t,n,r){if(Yt=null,null!==(e=ya(e=Ae(r))))if(null===(t=He(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Yt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ge:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Gt=null;function en(){if(Gt)return Gt;var e,t,n=Jt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[o-t];t++);return Gt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),dn=M({},sn,{view:0,detail:0}),fn=an(dn),pn=M({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=an(pn),mn=an(M({},pn,{dataTransfer:0})),vn=an(M({},dn,{relatedTarget:0})),gn=an(M({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=M({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(yn),wn=an(M({},sn,{data:0})),An={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function En(){return Sn}var xn=M({},dn,{key:function(e){if(e.key){var t=An[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=an(xn),Pn=an(M({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Bn=an(M({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Tn=an(M({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),zn=M({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=an(zn),Rn=[9,13,27,32],Nn=c&&"CompositionEvent"in window,Dn=null;c&&"documentMode"in document&&(Dn=document.documentMode);var On=c&&"TextEvent"in window&&!Dn,Mn=c&&(!Nn||Dn&&8<Dn&&11>=Dn),Fn=String.fromCharCode(32),Un=!1;function In(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function jn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Hn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function $n(e,t,n,r){xe(r),0<(t=Qr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,qn=null;function Yn(e){Fr(e,0)}function Zn(e){if(q(wa(e)))return e}function Kn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Jn;if(c){var Gn="oninput"in document;if(!Gn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Gn="function"==typeof er.oninput}Jn=Gn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Qn&&(Qn.detachEvent("onpropertychange",nr),qn=Qn=null)}function nr(e){if("value"===e.propertyName&&Zn(qn)){var t=[];$n(t,qn,e,Ae(e)),ze(Yn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Zn(qn)}function or(e,t){if("click"===e)return Zn(t)}function lr(e,t){if("input"===e||"change"===e)return Zn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!ir(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Y();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Y((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var l=cr(n,r);a&&l&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,vr=null,gr=null,yr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==Y(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=Qr(gr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function Ar(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Cr={animationend:Ar("Animation","AnimationEnd"),animationiteration:Ar("Animation","AnimationIteration"),animationstart:Ar("Animation","AnimationStart"),transitionend:Ar("Transition","TransitionEnd")},kr={},Sr={};function Er(e){if(kr[e])return kr[e];if(!Cr[e])return e;var t,n=Cr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return kr[e]=n[t];return e}c&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete Cr.animationend.animation,delete Cr.animationiteration.animation,delete Cr.animationstart.animation),"TransitionEvent"in window||delete Cr.transitionend.transition);var xr=Er("animationend"),_r=Er("animationiteration"),Pr=Er("animationstart"),Br=Er("transitionend"),Tr=new Map,zr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lr(e,t){Tr.set(e,t),u(t,[e])}for(var Rr=0;Rr<zr.length;Rr++){var Nr=zr[Rr];Lr(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Lr(xr,"onAnimationEnd"),Lr(_r,"onAnimationIteration"),Lr(Pr,"onAnimationStart"),Lr("dblclick","onDoubleClick"),Lr("focusin","onFocus"),Lr("focusout","onBlur"),Lr(Br,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Dr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Or=new Set("cancel close invalid load scroll toggle".split(" ").concat(Dr));function Mr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,l,i,u,s){if(je.apply(this,arguments),Oe){if(!Oe)throw Error(o(198));var c=Me;Oe=!1,Me=null,Fe||(Fe=!0,Ue=c)}}(r,t,void 0,e),e.currentTarget=null}function Fr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==o&&a.isPropagationStopped())break e;Mr(a,i,s),o=u}else for(l=0;l<r.length;l++){if(u=(i=r[l]).instance,s=i.currentTarget,i=i.listener,u!==o&&a.isPropagationStopped())break e;Mr(a,i,s),o=u}}}if(Fe)throw e=Ue,Fe=!1,Ue=null,e}function Ur(e,t){var n=t[ma];void 0===n&&(n=t[ma]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Ir(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var jr="_reactListening"+Math.random().toString(36).slice(2);function Hr(e){if(!e[jr]){e[jr]=!0,l.forEach((function(t){"selectionchange"!==t&&(Or.has(t)||Ir(t,!1,e),Ir(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[jr]||(t[jr]=!0,Ir("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Kt(t)){case 1:var a=$t;break;case 4:a=Qt;break;default:a=qt}n=a.bind(null,t,n,e),a=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===l)for(l=r.return;null!==l;){var u=l.tag;if((3===u||4===u)&&((u=l.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;l=l.return}for(;null!==i;){if(null===(l=ya(i)))return;if(5===(u=l.tag)||6===u){r=o=l;continue e}i=i.parentNode}}r=r.return}ze((function(){var r=o,a=Ae(n),l=[];e:{var i=Tr.get(e);if(void 0!==i){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=_n;break;case"focusin":s="focus",u=vn;break;case"focusout":s="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Bn;break;case xr:case _r:case Pr:u=gn;break;case Br:u=Tn;break;case"scroll":u=fn;break;case"wheel":u=Ln;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=Le(h,f))&&c.push($r(h,m,p))),d)break;h=h.return}0<c.length&&(i=new u(i,s,null,n,a),l.push({event:i,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!ya(s)&&!s[ha])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ya(s):null)&&(s!==(d=He(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==u?i:wa(u),p=null==s?i:wa(s),(i=new c(m,h+"leave",u,n,a)).target=d,i.relatedTarget=p,m=null,ya(a)===r&&((c=new c(f,h+"enter",s,n,a)).target=p,c.relatedTarget=d,m=c),d=m,u&&s)e:{for(f=s,h=0,p=c=u;p;p=qr(p))h++;for(p=0,m=f;m;m=qr(m))p++;for(;0<h-p;)c=qr(c),h--;for(;0<p-h;)f=qr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=qr(c),f=qr(f)}c=null}else c=null;null!==u&&Yr(l,i,u,c,!1),null!==s&&null!==d&&Yr(l,d,s,c,!0)}if("select"===(u=(i=r?wa(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var v=Kn;else if(Vn(i))if(Xn)v=lr;else{v=ar;var g=rr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(v=or);switch(v&&(v=v(e,r))?$n(l,v,n,a):(g&&g(e,i,r),"focusout"===e&&(g=i._wrapperState)&&g.controlled&&"number"===i.type&&ee(i,"number",i.value)),g=r?wa(r):window,e){case"focusin":(Vn(g)||"true"===g.contentEditable)&&(vr=g,gr=r,yr=null);break;case"focusout":yr=gr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(l,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(l,n,a)}var y;if(Nn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Hn?In(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&(Hn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Hn&&(y=en()):(Jt="value"in(Xt=a)?Xt.value:Xt.textContent,Hn=!0)),0<(g=Qr(r,b)).length&&(b=new wn(b,e,null,n,a),l.push({event:b,listeners:g}),(y||null!==(y=jn(n)))&&(b.data=y))),(y=On?function(e,t){switch(e){case"compositionend":return jn(t);case"keypress":return 32!==t.which?null:(Un=!0,Fn);case"textInput":return(e=t.data)===Fn&&Un?null:e;default:return null}}(e,n):function(e,t){if(Hn)return"compositionend"===e||!Nn&&In(e,t)?(e=en(),Gt=Jt=Xt=null,Hn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Qr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),l.push({event:a,listeners:r}),a.data=y)}Fr(l,t)}))}function $r(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Le(e,n))&&r.unshift($r(e,o,a)),null!=(o=Le(e,t))&&r.push($r(e,o,a))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yr(e,t,n,r,a){for(var o=t._reactName,l=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==s&&(i=s,a?null!=(u=Le(n,o))&&l.unshift($r(n,u,i)):a||null!=(u=Le(n,o))&&l.push($r(n,u,i))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Zr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Zr,"\n").replace(Kr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Gr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,la="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(ia)}:ra;function ia(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ht(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ht(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),fa="__reactFiber$"+da,pa="__reactProps$"+da,ha="__reactContainer$"+da,ma="__reactEvents$"+da,va="__reactListeners$"+da,ga="__reactHandles$"+da;function ya(e){var t=e[fa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ha]||n[fa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[fa])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[fa]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function Aa(e){return e[pa]||null}var Ca=[],ka=-1;function Sa(e){return{current:e}}function Ea(e){0>ka||(e.current=Ca[ka],Ca[ka]=null,ka--)}function xa(e,t){ka++,Ca[ka]=e.current,e.current=t}var _a={},Pa=Sa(_a),Ba=Sa(!1),Ta=_a;function za(e,t){var n=e.type.contextTypes;if(!n)return _a;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function La(e){return null!=e.childContextTypes}function Ra(){Ea(Ba),Ea(Pa)}function Na(e,t,n){if(Pa.current!==_a)throw Error(o(168));xa(Pa,t),xa(Ba,n)}function Da(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,W(e)||"Unknown",a));return M({},n,r)}function Oa(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_a,Ta=Pa.current,xa(Pa,e),xa(Ba,Ba.current),!0}function Ma(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Da(e,t,Ta),r.__reactInternalMemoizedMergedChildContext=e,Ea(Ba),Ea(Pa),xa(Pa,e)):Ea(Ba),xa(Ba,n)}var Fa=null,Ua=!1,Ia=!1;function ja(e){null===Fa?Fa=[e]:Fa.push(e)}function Ha(){if(!Ia&&null!==Fa){Ia=!0;var e=0,t=bt;try{var n=Fa;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fa=null,Ua=!1}catch(t){throw null!==Fa&&(Fa=Fa.slice(e+1)),qe(Ge,Ha),t}finally{bt=t,Ia=!1}}return null}var Wa=[],Va=0,$a=null,Qa=0,qa=[],Ya=0,Za=null,Ka=1,Xa="";function Ja(e,t){Wa[Va++]=Qa,Wa[Va++]=$a,$a=e,Qa=t}function Ga(e,t,n){qa[Ya++]=Ka,qa[Ya++]=Xa,qa[Ya++]=Za,Za=e;var r=Ka;e=Xa;var a=32-lt(r)-1;r&=~(1<<a),n+=1;var o=32-lt(t)+a;if(30<o){var l=a-a%5;o=(r&(1<<l)-1).toString(32),r>>=l,a-=l,Ka=1<<32-lt(t)+a|n<<a|r,Xa=o+e}else Ka=1<<o|n<<a|r,Xa=e}function eo(e){null!==e.return&&(Ja(e,1),Ga(e,1,0))}function to(e){for(;e===$a;)$a=Wa[--Va],Wa[Va]=null,Qa=Wa[--Va],Wa[Va]=null;for(;e===Za;)Za=qa[--Ya],qa[Ya]=null,Xa=qa[--Ya],qa[Ya]=null,Ka=qa[--Ya],qa[Ya]=null}var no=null,ro=null,ao=!1,oo=null;function lo(e,t){var n=Ls(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function io(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Za?{id:Ka,overflow:Xa}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ls(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function uo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function so(e){if(ao){var t=ro;if(t){var n=t;if(!io(e,t)){if(uo(e))throw Error(o(418));t=sa(n.nextSibling);var r=no;t&&io(e,t)?lo(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(uo(e))throw po(),Error(o(418));for(;t;)lo(e,t),t=sa(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?sa(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=sa(e.nextSibling)}function ho(){ro=no=null,ao=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var vo=w.ReactCurrentBatchConfig;function go(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var yo=Sa(null),bo=null,wo=null,Ao=null;function Co(){Ao=wo=bo=null}function ko(e){var t=yo.current;Ea(yo),e._currentValue=t}function So(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Eo(e,t){bo=e,Ao=wo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wi=!0),e.firstContext=null)}function xo(e){var t=e._currentValue;if(Ao!==e)if(e={context:e,memoizedValue:t,next:null},null===wo){if(null===bo)throw Error(o(308));wo=e,bo.dependencies={lanes:0,firstContext:e}}else wo=wo.next=e;return t}var _o=null;function Po(e){null===_o?_o=[e]:_o.push(e)}function Bo(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Po(t)):(n.next=a.next,a.next=n),t.interleaved=n,To(e,r)}function To(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var zo=!1;function Lo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function No(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Do(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Bu)){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,To(e,n)}return null===(a=r.interleaved)?(t.next=t,Po(r)):(t.next=a.next,a.next=t),r.interleaved=t,To(e,n)}function Oo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Mo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Fo(e,t,n,r){var a=e.updateQueue;zo=!1;var o=a.firstBaseUpdate,l=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,s=u.next;u.next=null,null===l?o=s:l.next=s,l=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==o){var d=a.baseState;for(l=0,c=s=u=null,i=o;;){var f=i.lane,p=i.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(f=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(p,d,f):h))break e;d=M({},d,f);break e;case 2:zo=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[i]:f.push(i))}else p={eventTime:p,lane:f,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=d):c=c.next=p,l|=f;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(f=i).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===c&&(u=d),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{l|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Mu|=l,e.lanes=l,e.memoizedState=d}}function Uo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Io=(new r.Component).refs;function jo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Ho={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ts(),a=ns(e),o=No(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=Do(e,o,a))&&(rs(t,e,a,r),Oo(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ts(),a=ns(e),o=No(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Do(e,o,a))&&(rs(t,e,a,r),Oo(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ts(),r=ns(e),a=No(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Do(e,a,r))&&(rs(t,e,r,n),Oo(t,e,r))}};function Wo(e,t,n,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function Vo(e,t,n){var r=!1,a=_a,o=t.contextType;return"object"==typeof o&&null!==o?o=xo(o):(a=La(t)?Ta:Pa.current,o=(r=null!=(r=t.contextTypes))?za(e,a):_a),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ho,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function $o(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ho.enqueueReplaceState(t,t.state,null)}function Qo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=Io,Lo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=xo(o):(o=La(t)?Ta:Pa.current,a.context=za(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(jo(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Ho.enqueueReplaceState(a,a.state,null),Fo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function qo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=a.refs;t===Io&&(t=a.refs={}),null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Yo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Zo(e){return(0,e._init)(e._payload)}function Ko(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ns(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Fs(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===k?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===L&&Zo(o)===t.type)?((r=a(t,n.props)).ref=qo(e,t,n),r.return=e,r):((r=Ds(n.type,n.key,n.props,null,e.mode,r)).ref=qo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Us(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Os(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Fs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case A:return(n=Ds(t.type,t.key,t.props,null,e.mode,n)).ref=qo(e,null,t),n.return=e,n;case C:return(t=Us(t,e.mode,n)).return=e,t;case L:return f(e,(0,t._init)(t._payload),n)}if(te(t)||D(t))return(t=Os(t,e.mode,n,null)).return=e,t;Yo(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case A:return n.key===a?s(e,t,n,r):null;case C:return n.key===a?c(e,t,n,r):null;case L:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||D(n))return null!==a?null:d(e,t,n,r,null);Yo(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case A:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case C:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case L:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||D(r))return d(t,e=e.get(n)||null,r,a,null);Yo(t,r)}return null}function m(a,o,i,u){for(var s=null,c=null,d=o,m=o=0,v=null;null!==d&&m<i.length;m++){d.index>m?(v=d,d=null):v=d.sibling;var g=p(a,d,i[m],u);if(null===g){null===d&&(d=v);break}e&&d&&null===g.alternate&&t(a,d),o=l(g,o,m),null===c?s=g:c.sibling=g,c=g,d=v}if(m===i.length)return n(a,d),ao&&Ja(a,m),s;if(null===d){for(;m<i.length;m++)null!==(d=f(a,i[m],u))&&(o=l(d,o,m),null===c?s=d:c.sibling=d,c=d);return ao&&Ja(a,m),s}for(d=r(a,d);m<i.length;m++)null!==(v=h(d,a,m,i[m],u))&&(e&&null!==v.alternate&&d.delete(null===v.key?m:v.key),o=l(v,o,m),null===c?s=v:c.sibling=v,c=v);return e&&d.forEach((function(e){return t(a,e)})),ao&&Ja(a,m),s}function v(a,i,u,s){var c=D(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var d=c=null,m=i,v=i=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(a,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(a,m),i=l(b,i,v),null===d?c=b:d.sibling=b,d=b,m=g}if(y.done)return n(a,m),ao&&Ja(a,v),c;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=f(a,y.value,s))&&(i=l(y,i,v),null===d?c=y:d.sibling=y,d=y);return ao&&Ja(a,v),c}for(m=r(a,m);!y.done;v++,y=u.next())null!==(y=h(m,a,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),i=l(y,i,v),null===d?c=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(a,e)})),ao&&Ja(a,v),c}return function e(r,o,l,u){if("object"==typeof l&&null!==l&&l.type===k&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case A:e:{for(var s=l.key,c=o;null!==c;){if(c.key===s){if((s=l.type)===k){if(7===c.tag){n(r,c.sibling),(o=a(c,l.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===L&&Zo(s)===c.type){n(r,c.sibling),(o=a(c,l.props)).ref=qo(r,c,l),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}l.type===k?((o=Os(l.props.children,r.mode,u,l.key)).return=r,r=o):((u=Ds(l.type,l.key,l.props,null,r.mode,u)).ref=qo(r,o,l),u.return=r,r=u)}return i(r);case C:e:{for(c=l.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===l.containerInfo&&o.stateNode.implementation===l.implementation){n(r,o.sibling),(o=a(o,l.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Us(l,r.mode,u)).return=r,r=o}return i(r);case L:return e(r,o,(c=l._init)(l._payload),u)}if(te(l))return m(r,o,l,u);if(D(l))return v(r,o,l,u);Yo(r,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,l)).return=r,r=o):(n(r,o),(o=Fs(l,r.mode,u)).return=r,r=o),i(r)):n(r,o)}}var Xo=Ko(!0),Jo=Ko(!1),Go={},el=Sa(Go),tl=Sa(Go),nl=Sa(Go);function rl(e){if(e===Go)throw Error(o(174));return e}function al(e,t){switch(xa(nl,t),xa(tl,e),xa(el,Go),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ea(el),xa(el,t)}function ol(){Ea(el),Ea(tl),Ea(nl)}function ll(e){rl(nl.current);var t=rl(el.current),n=ue(t,e.type);t!==n&&(xa(tl,e),xa(el,n))}function il(e){tl.current===e&&(Ea(el),Ea(tl))}var ul=Sa(0);function sl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var cl=[];function dl(){for(var e=0;e<cl.length;e++)cl[e]._workInProgressVersionPrimary=null;cl.length=0}var fl=w.ReactCurrentDispatcher,pl=w.ReactCurrentBatchConfig,hl=0,ml=null,vl=null,gl=null,yl=!1,bl=!1,wl=0,Al=0;function Cl(){throw Error(o(321))}function kl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function Sl(e,t,n,r,a,l){if(hl=l,ml=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fl.current=null===e||null===e.memoizedState?ii:ui,e=n(r,a),bl){l=0;do{if(bl=!1,wl=0,25<=l)throw Error(o(301));l+=1,gl=vl=null,t.updateQueue=null,fl.current=si,e=n(r,a)}while(bl)}if(fl.current=li,t=null!==vl&&null!==vl.next,hl=0,gl=vl=ml=null,yl=!1,t)throw Error(o(300));return e}function El(){var e=0!==wl;return wl=0,e}function xl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===gl?ml.memoizedState=gl=e:gl=gl.next=e,gl}function _l(){if(null===vl){var e=ml.alternate;e=null!==e?e.memoizedState:null}else e=vl.next;var t=null===gl?ml.memoizedState:gl.next;if(null!==t)gl=t,vl=e;else{if(null===e)throw Error(o(310));e={memoizedState:(vl=e).memoizedState,baseState:vl.baseState,baseQueue:vl.baseQueue,queue:vl.queue,next:null},null===gl?ml.memoizedState=gl=e:gl=gl.next=e}return gl}function Pl(e,t){return"function"==typeof t?t(e):t}function Bl(e){var t=_l(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=vl,a=r.baseQueue,l=n.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}r.baseQueue=a=l,n.pending=null}if(null!==a){l=a.next,r=r.baseState;var u=i=null,s=null,c=l;do{var d=c.lane;if((hl&d)===d)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=f,i=r):s=s.next=f,ml.lanes|=d,Mu|=d}c=c.next}while(null!==c&&c!==l);null===s?i=r:s.next=u,ir(r,t.memoizedState)||(wi=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{l=a.lane,ml.lanes|=l,Mu|=l,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Tl(e){var t=_l(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);ir(l,t.memoizedState)||(wi=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function zl(){}function Ll(e,t){var n=ml,r=_l(),a=t(),l=!ir(r.memoizedState,a);if(l&&(r.memoizedState=a,wi=!0),r=r.queue,Vl(Dl.bind(null,n,r,e),[e]),r.getSnapshot!==t||l||null!==gl&&1&gl.memoizedState.tag){if(n.flags|=2048,Ul(9,Nl.bind(null,n,r,a,t),void 0,null),null===Tu)throw Error(o(349));0!=(30&hl)||Rl(n,t,a)}return a}function Rl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ml.updateQueue)?(t={lastEffect:null,stores:null},ml.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Nl(e,t,n,r){t.value=n,t.getSnapshot=r,Ol(t)&&Ml(e)}function Dl(e,t,n){return n((function(){Ol(t)&&Ml(e)}))}function Ol(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ir(e,n)}catch(e){return!0}}function Ml(e){var t=To(e,1);null!==t&&rs(t,e,1,-1)}function Fl(e){var t=xl();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Pl,lastRenderedState:e},t.queue=e,e=e.dispatch=ni.bind(null,ml,e),[t.memoizedState,e]}function Ul(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ml.updateQueue)?(t={lastEffect:null,stores:null},ml.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Il(){return _l().memoizedState}function jl(e,t,n,r){var a=xl();ml.flags|=e,a.memoizedState=Ul(1|t,n,void 0,void 0===r?null:r)}function Hl(e,t,n,r){var a=_l();r=void 0===r?null:r;var o=void 0;if(null!==vl){var l=vl.memoizedState;if(o=l.destroy,null!==r&&kl(r,l.deps))return void(a.memoizedState=Ul(t,n,o,r))}ml.flags|=e,a.memoizedState=Ul(1|t,n,o,r)}function Wl(e,t){return jl(8390656,8,e,t)}function Vl(e,t){return Hl(2048,8,e,t)}function $l(e,t){return Hl(4,2,e,t)}function Ql(e,t){return Hl(4,4,e,t)}function ql(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Yl(e,t,n){return n=null!=n?n.concat([e]):null,Hl(4,4,ql.bind(null,t,e),n)}function Zl(){}function Kl(e,t){var n=_l();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&kl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xl(e,t){var n=_l();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&kl(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Jl(e,t,n){return 0==(21&hl)?(e.baseState&&(e.baseState=!1,wi=!0),e.memoizedState=n):(ir(n,t)||(n=mt(),ml.lanes|=n,Mu|=n,e.baseState=!0),t)}function Gl(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pl.transition;pl.transition={};try{e(!1),t()}finally{bt=n,pl.transition=r}}function ei(){return _l().memoizedState}function ti(e,t,n){var r=ns(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ri(e)?ai(t,n):null!==(n=Bo(e,t,n,r))&&(rs(n,e,r,ts()),oi(n,t,r))}function ni(e,t,n){var r=ns(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ri(e))ai(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,i=o(l,n);if(a.hasEagerState=!0,a.eagerState=i,ir(i,l)){var u=t.interleaved;return null===u?(a.next=a,Po(t)):(a.next=u.next,u.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Bo(e,t,a,r))&&(rs(n,e,r,a=ts()),oi(n,t,r))}}function ri(e){var t=e.alternate;return e===ml||null!==t&&t===ml}function ai(e,t){bl=yl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function oi(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var li={readContext:xo,useCallback:Cl,useContext:Cl,useEffect:Cl,useImperativeHandle:Cl,useInsertionEffect:Cl,useLayoutEffect:Cl,useMemo:Cl,useReducer:Cl,useRef:Cl,useState:Cl,useDebugValue:Cl,useDeferredValue:Cl,useTransition:Cl,useMutableSource:Cl,useSyncExternalStore:Cl,useId:Cl,unstable_isNewReconciler:!1},ii={readContext:xo,useCallback:function(e,t){return xl().memoizedState=[e,void 0===t?null:t],e},useContext:xo,useEffect:Wl,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,jl(4194308,4,ql.bind(null,t,e),n)},useLayoutEffect:function(e,t){return jl(4194308,4,e,t)},useInsertionEffect:function(e,t){return jl(4,2,e,t)},useMemo:function(e,t){var n=xl();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=xl();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ti.bind(null,ml,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},xl().memoizedState=e},useState:Fl,useDebugValue:Zl,useDeferredValue:function(e){return xl().memoizedState=e},useTransition:function(){var e=Fl(!1),t=e[0];return e=Gl.bind(null,e[1]),xl().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ml,a=xl();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Tu)throw Error(o(349));0!=(30&hl)||Rl(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,Wl(Dl.bind(null,r,l,e),[e]),r.flags|=2048,Ul(9,Nl.bind(null,r,l,n,t),void 0,null),n},useId:function(){var e=xl(),t=Tu.identifierPrefix;if(ao){var n=Xa;t=":"+t+"R"+(n=(Ka&~(1<<32-lt(Ka)-1)).toString(32)+n),0<(n=wl++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Al++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ui={readContext:xo,useCallback:Kl,useContext:xo,useEffect:Vl,useImperativeHandle:Yl,useInsertionEffect:$l,useLayoutEffect:Ql,useMemo:Xl,useReducer:Bl,useRef:Il,useState:function(){return Bl(Pl)},useDebugValue:Zl,useDeferredValue:function(e){return Jl(_l(),vl.memoizedState,e)},useTransition:function(){return[Bl(Pl)[0],_l().memoizedState]},useMutableSource:zl,useSyncExternalStore:Ll,useId:ei,unstable_isNewReconciler:!1},si={readContext:xo,useCallback:Kl,useContext:xo,useEffect:Vl,useImperativeHandle:Yl,useInsertionEffect:$l,useLayoutEffect:Ql,useMemo:Xl,useReducer:Tl,useRef:Il,useState:function(){return Tl(Pl)},useDebugValue:Zl,useDeferredValue:function(e){var t=_l();return null===vl?t.memoizedState=e:Jl(t,vl.memoizedState,e)},useTransition:function(){return[Tl(Pl)[0],_l().memoizedState]},useMutableSource:zl,useSyncExternalStore:Ll,useId:ei,unstable_isNewReconciler:!1};function ci(e,t){try{var n="",r=t;do{n+=j(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function di(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fi(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pi="function"==typeof WeakMap?WeakMap:Map;function hi(e,t,n){(n=No(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$u||($u=!0,Qu=r),fi(0,t)},n}function mi(e,t,n){(n=No(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){fi(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){fi(0,t),"function"!=typeof r&&(null===qu?qu=new Set([this]):qu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vi(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pi;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=xs.bind(null,e,t,n),t.then(e,e))}function gi(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yi(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=No(-1,1)).tag=2,Do(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var bi=w.ReactCurrentOwner,wi=!1;function Ai(e,t,n,r){t.child=null===e?Jo(t,null,n,r):Xo(t,e.child,n,r)}function Ci(e,t,n,r,a){n=n.render;var o=t.ref;return Eo(t,a),r=Sl(e,t,n,r,o,a),n=El(),null===e||wi?(ao&&n&&eo(t),t.flags|=1,Ai(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,$i(e,t,a))}function ki(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Rs(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ds(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Si(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var l=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(l,r)&&e.ref===t.ref)return $i(e,t,a)}return t.flags|=1,(e=Ns(o,r)).ref=t.ref,e.return=t,t.child=e}function Si(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(wi=!1,t.pendingProps=r=o,0==(e.lanes&a))return t.lanes=e.lanes,$i(e,t,a);0!=(131072&e.flags)&&(wi=!0)}}return _i(e,t,n,r,a)}function Ei(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},xa(Nu,Ru),Ru|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,xa(Nu,Ru),Ru|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,xa(Nu,Ru),Ru|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,xa(Nu,Ru),Ru|=r;return Ai(e,t,a,n),t.child}function xi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function _i(e,t,n,r,a){var o=La(n)?Ta:Pa.current;return o=za(t,o),Eo(t,a),n=Sl(e,t,n,r,o,a),r=El(),null===e||wi?(ao&&r&&eo(t),t.flags|=1,Ai(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,$i(e,t,a))}function Pi(e,t,n,r,a){if(La(n)){var o=!0;Oa(t)}else o=!1;if(Eo(t,a),null===t.stateNode)Vi(e,t),Vo(t,n,r),Qo(t,n,r,a),r=!0;else if(null===e){var l=t.stateNode,i=t.memoizedProps;l.props=i;var u=l.context,s=n.contextType;s="object"==typeof s&&null!==s?xo(s):za(t,s=La(n)?Ta:Pa.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof l.getSnapshotBeforeUpdate;d||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==r||u!==s)&&$o(t,l,r,s),zo=!1;var f=t.memoizedState;l.state=f,Fo(t,r,l,a),u=t.memoizedState,i!==r||f!==u||Ba.current||zo?("function"==typeof c&&(jo(t,n,c,r),u=t.memoizedState),(i=zo||Wo(t,n,i,r,f,u,s))?(d||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),l.props=r,l.state=u,l.context=s,r=i):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,Ro(e,t),i=t.memoizedProps,s=t.type===t.elementType?i:go(t.type,i),l.props=s,d=t.pendingProps,f=l.context,u="object"==typeof(u=n.contextType)&&null!==u?xo(u):za(t,u=La(n)?Ta:Pa.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==d||f!==u)&&$o(t,l,r,u),zo=!1,f=t.memoizedState,l.state=f,Fo(t,r,l,a);var h=t.memoizedState;i!==d||f!==h||Ba.current||zo?("function"==typeof p&&(jo(t,n,p,r),h=t.memoizedState),(s=zo||Wo(t,n,s,r,f,h,u)||!1)?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,h,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),l.props=r,l.state=h,l.context=u,r=s):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Bi(e,t,n,r,o,a)}function Bi(e,t,n,r,a,o){xi(e,t);var l=0!=(128&t.flags);if(!r&&!l)return a&&Ma(t,n,!1),$i(e,t,o);r=t.stateNode,bi.current=t;var i=l&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&l?(t.child=Xo(t,e.child,null,o),t.child=Xo(t,null,i,o)):Ai(e,t,i,o),t.memoizedState=r.state,a&&Ma(t,n,!0),t.child}function Ti(e){var t=e.stateNode;t.pendingContext?Na(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Na(0,t.context,!1),al(e,t.containerInfo)}function zi(e,t,n,r,a){return ho(),mo(a),t.flags|=256,Ai(e,t,n,r),t.child}var Li,Ri,Ni,Di,Oi={dehydrated:null,treeContext:null,retryLane:0};function Mi(e){return{baseLanes:e,cachePool:null,transitions:null}}function Fi(e,t,n){var r,a=t.pendingProps,l=ul.current,i=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&l)),r?(i=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),xa(ul,1&l),null===e)return so(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=a.children,e=a.fallback,i?(a=t.mode,i=t.child,u={mode:"hidden",children:u},0==(1&a)&&null!==i?(i.childLanes=0,i.pendingProps=u):i=Ms(u,a,0,null),e=Os(e,a,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=Mi(n),t.memoizedState=Oi,e):Ui(t,u));if(null!==(l=e.memoizedState)&&null!==(r=l.dehydrated))return function(e,t,n,r,a,l,i){if(n)return 256&t.flags?(t.flags&=-257,Ii(e,t,i,r=di(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=r.fallback,a=t.mode,r=Ms({mode:"visible",children:r.children},a,0,null),(l=Os(l,a,i,null)).flags|=2,r.return=t,l.return=t,r.sibling=l,t.child=r,0!=(1&t.mode)&&Xo(t,e.child,null,i),t.child.memoizedState=Mi(i),t.memoizedState=Oi,l);if(0==(1&t.mode))return Ii(e,t,i,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,Ii(e,t,i,r=di(l=Error(o(419)),r,void 0))}if(u=0!=(i&e.childLanes),wi||u){if(null!==(r=Tu)){switch(i&-i){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|i))?0:a)&&a!==l.retryLane&&(l.retryLane=a,To(e,a),rs(r,e,a,-1))}return vs(),Ii(e,t,i,r=di(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Ps.bind(null,e),a._reactRetry=t,null):(e=l.treeContext,ro=sa(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(qa[Ya++]=Ka,qa[Ya++]=Xa,qa[Ya++]=Za,Ka=e.id,Xa=e.overflow,Za=t),(t=Ui(t,r.children)).flags|=4096,t)}(e,t,u,a,r,l,n);if(i){i=a.fallback,u=t.mode,r=(l=e.child).sibling;var s={mode:"hidden",children:a.children};return 0==(1&u)&&t.child!==l?((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null):(a=Ns(l,s)).subtreeFlags=14680064&l.subtreeFlags,null!==r?i=Ns(r,i):(i=Os(i,u,n,null)).flags|=2,i.return=t,a.return=t,a.sibling=i,t.child=a,a=i,i=t.child,u=null===(u=e.child.memoizedState)?Mi(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},i.memoizedState=u,i.childLanes=e.childLanes&~n,t.memoizedState=Oi,a}return e=(i=e.child).sibling,a=Ns(i,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Ui(e,t){return(t=Ms({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ii(e,t,n,r){return null!==r&&mo(r),Xo(t,e.child,null,n),(e=Ui(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ji(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),So(e.return,t,n)}function Hi(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Wi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ai(e,t,r.children,n),0!=(2&(r=ul.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ji(e,n,t);else if(19===e.tag)ji(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xa(ul,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===sl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Hi(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===sl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Hi(t,!0,n,null,o);break;case"together":Hi(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vi(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function $i(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Mu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ns(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ns(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Qi(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function qi(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Yi(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return qi(t),null;case 1:case 17:return La(t.type)&&Ra(),qi(t),null;case 3:return r=t.stateNode,ol(),Ea(Ba),Ea(Pa),dl(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(is(oo),oo=null))),Ri(e,t),qi(t),null;case 5:il(t);var a=rl(nl.current);if(n=t.type,null!==e&&null!=t.stateNode)Ni(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return qi(t),null}if(e=rl(el.current),fo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[fa]=t,r[pa]=l,e=0!=(1&t.mode),n){case"dialog":Ur("cancel",r),Ur("close",r);break;case"iframe":case"object":case"embed":Ur("load",r);break;case"video":case"audio":for(a=0;a<Dr.length;a++)Ur(Dr[a],r);break;case"source":Ur("error",r);break;case"img":case"image":case"link":Ur("error",r),Ur("load",r);break;case"details":Ur("toggle",r);break;case"input":K(r,l),Ur("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Ur("invalid",r);break;case"textarea":ae(r,l),Ur("invalid",r)}for(var u in ye(n,l),a=null,l)if(l.hasOwnProperty(u)){var s=l[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==l.suppressHydrationWarning&&Jr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==l.suppressHydrationWarning&&Jr(r.textContent,s,e),a=["children",""+s]):i.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Ur("scroll",r)}switch(n){case"input":Q(r),G(r,l,!0);break;case"textarea":Q(r),le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Gr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[fa]=t,e[pa]=r,Li(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Ur("cancel",e),Ur("close",e),a=r;break;case"iframe":case"object":case"embed":Ur("load",e),a=r;break;case"video":case"audio":for(a=0;a<Dr.length;a++)Ur(Dr[a],e);a=r;break;case"source":Ur("error",e),a=r;break;case"img":case"image":case"link":Ur("error",e),Ur("load",e),a=r;break;case"details":Ur("toggle",e),a=r;break;case"input":K(e,r),a=Z(e,r),Ur("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=M({},r,{value:void 0}),Ur("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Ur("invalid",e)}for(l in ye(n,a),s=a)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?ve(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===l?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(i.hasOwnProperty(l)?null!=c&&"onScroll"===l&&Ur("scroll",e):null!=c&&b(e,l,c,u))}switch(n){case"input":Q(e),G(e,r,!1);break;case"textarea":Q(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ne(e,!!r.multiple,l,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Gr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return qi(t),null;case 6:if(e&&null!=t.stateNode)Di(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=rl(nl.current),rl(el.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[fa]=t,(l=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}l&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fa]=t,t.stateNode=r}return qi(t),null;case 13:if(Ea(ul),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))po(),ho(),t.flags|=98560,l=!1;else if(l=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(o(317));l[fa]=t}else ho(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;qi(t),l=!1}else null!==oo&&(is(oo),oo=null),l=!0;if(!l)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ul.current)?0===Du&&(Du=3):vs())),null!==t.updateQueue&&(t.flags|=4),qi(t),null);case 4:return ol(),Ri(e,t),null===e&&Hr(t.stateNode.containerInfo),qi(t),null;case 10:return ko(t.type._context),qi(t),null;case 19:if(Ea(ul),null===(l=t.memoizedState))return qi(t),null;if(r=0!=(128&t.flags),null===(u=l.rendering))if(r)Qi(l,!1);else{if(0!==Du||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=sl(e))){for(t.flags|=128,Qi(l,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=14680066,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xa(ul,1&ul.current|2),t.child}e=e.sibling}null!==l.tail&&Xe()>Wu&&(t.flags|=128,r=!0,Qi(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=sl(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Qi(l,!0),null===l.tail&&"hidden"===l.tailMode&&!u.alternate&&!ao)return qi(t),null}else 2*Xe()-l.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=128,r=!0,Qi(l,!1),t.lanes=4194304);l.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=l.last)?n.sibling=u:t.child=u,l.last=u)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=Xe(),t.sibling=null,n=ul.current,xa(ul,r?1&n|2:1&n),t):(qi(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ru)&&(qi(t),6&t.subtreeFlags&&(t.flags|=8192)):qi(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Zi(e,t){switch(to(t),t.tag){case 1:return La(t.type)&&Ra(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ol(),Ea(Ba),Ea(Pa),dl(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return il(t),null;case 13:if(Ea(ul),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ea(ul),null;case 4:return ol(),null;case 10:return ko(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Li=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ri=function(){},Ni=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,rl(el.current);var o,l=null;switch(n){case"input":a=Z(e,a),r=Z(e,r),l=[];break;case"select":a=M({},a,{value:void 0}),r=M({},r,{value:void 0}),l=[];break;case"textarea":a=re(e,a),r=re(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Gr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(i.hasOwnProperty(c)?l||(l=[]):(l=l||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(l||(l=[]),l.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(l=l||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(l=l||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(i.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Ur("scroll",e),l||u===s||(l=[])):(l=l||[]).push(c,s))}n&&(l=l||[]).push("style",n);var c=l;(t.updateQueue=c)&&(t.flags|=4)}},Di=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ki=!1,Xi=!1,Ji="function"==typeof WeakSet?WeakSet:Set,Gi=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Es(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){Es(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&tu(t,n,o)}a=a.next}while(a!==r)}}function au(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function lu(e){var t=e.alternate;null!==t&&(e.alternate=null,lu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fa],delete t[pa],delete t[ma],delete t[va],delete t[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Gr));else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var du=null,fu=!1;function pu(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Xi||eu(n,t);case 6:var r=du,a=fu;du=null,pu(e,t,n),fu=a,null!==(du=r)&&(fu?(e=du,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):du.removeChild(n.stateNode));break;case 18:null!==du&&(fu?(e=du,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Ht(e)):ua(du,n.stateNode));break;case 4:r=du,a=fu,du=n.stateNode.containerInfo,fu=!0,pu(e,t,n),du=r,fu=a;break;case 0:case 11:case 14:case 15:if(!Xi&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,l=o.destroy;o=o.tag,void 0!==l&&(0!=(2&o)||0!=(4&o))&&tu(n,t,l),a=a.next}while(a!==r)}pu(e,t,n);break;case 1:if(!Xi&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Es(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Xi=(r=Xi)||null!==n.memoizedState,pu(e,t,n),Xi=r):pu(e,t,n);break;default:pu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ji),t.forEach((function(t){var r=Bs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function vu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var l=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 5:du=u.stateNode,fu=!1;break e;case 3:case 4:du=u.stateNode.containerInfo,fu=!0;break e}u=u.return}if(null===du)throw Error(o(160));hu(l,i,a),du=null,fu=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){Es(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gu(t,e),t=t.sibling}function gu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vu(t,e),yu(e),4&r){try{ru(3,e,e.return),au(3,e)}catch(t){Es(e,e.return,t)}try{ru(5,e,e.return)}catch(t){Es(e,e.return,t)}}break;case 1:vu(t,e),yu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(vu(t,e),yu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var a=e.stateNode;try{fe(a,"")}catch(t){Es(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var l=e.memoizedProps,i=null!==n?n.memoizedProps:l,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===l.type&&null!=l.name&&X(a,l),be(u,i);var c=be(u,l);for(i=0;i<s.length;i+=2){var d=s[i],f=s[i+1];"style"===d?ve(a,f):"dangerouslySetInnerHTML"===d?de(a,f):"children"===d?fe(a,f):b(a,d,f,c)}switch(u){case"input":J(a,l);break;case"textarea":oe(a,l);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!l.multiple;var h=l.value;null!=h?ne(a,!!l.multiple,h,!1):p!==!!l.multiple&&(null!=l.defaultValue?ne(a,!!l.multiple,l.defaultValue,!0):ne(a,!!l.multiple,l.multiple?[]:"",!1))}a[pa]=l}catch(t){Es(e,e.return,t)}}break;case 6:if(vu(t,e),yu(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,l=e.memoizedProps;try{a.nodeValue=l}catch(t){Es(e,e.return,t)}}break;case 3:if(vu(t,e),yu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ht(t.containerInfo)}catch(t){Es(e,e.return,t)}break;case 4:default:vu(t,e),yu(e);break;case 13:vu(t,e),yu(e),8192&(a=e.child).flags&&(l=null!==a.memoizedState,a.stateNode.isHidden=l,!l||null!==a.alternate&&null!==a.alternate.memoizedState||(Hu=Xe())),4&r&&mu(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xi=(c=Xi)||d,vu(t,e),Xi=c):vu(t,e),yu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Gi=e,d=e.child;null!==d;){for(f=Gi=d;null!==Gi;){switch(h=(p=Gi).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Es(r,n,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){Cu(f);continue}}null!==h?(h.return=p,Gi=h):Cu(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{a=f.stateNode,c?"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none":(u=f.stateNode,i=null!=(s=f.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",i))}catch(t){Es(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Es(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:vu(t,e),yu(e),4&r&&mu(e);case 21:}}function yu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(fe(a,""),r.flags&=-33),cu(e,uu(e),a);break;case 3:case 4:var l=r.stateNode.containerInfo;su(e,uu(e),l);break;default:throw Error(o(161))}}catch(t){Es(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Gi=e,wu(e,t,n)}function wu(e,t,n){for(var r=0!=(1&e.mode);null!==Gi;){var a=Gi,o=a.child;if(22===a.tag&&r){var l=null!==a.memoizedState||Ki;if(!l){var i=a.alternate,u=null!==i&&null!==i.memoizedState||Xi;i=Ki;var s=Xi;if(Ki=l,(Xi=u)&&!s)for(Gi=a;null!==Gi;)u=(l=Gi).child,22===l.tag&&null!==l.memoizedState?ku(a):null!==u?(u.return=l,Gi=u):ku(a);for(;null!==o;)Gi=o,wu(o,t,n),o=o.sibling;Gi=a,Ki=i,Xi=s}Au(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Gi=o):Au(e)}}function Au(e){for(;null!==Gi;){var t=Gi;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xi||au(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xi)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:go(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;null!==l&&Uo(t,l,r);break;case 3:var i=t.updateQueue;if(null!==i){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Uo(t,i,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Ht(f)}}}break;default:throw Error(o(163))}Xi||512&t.flags&&ou(t)}catch(e){Es(t,t.return,e)}}if(t===e){Gi=null;break}if(null!==(n=t.sibling)){n.return=t.return,Gi=n;break}Gi=t.return}}function Cu(e){for(;null!==Gi;){var t=Gi;if(t===e){Gi=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Gi=n;break}Gi=t.return}}function ku(e){for(;null!==Gi;){var t=Gi;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{au(4,t)}catch(e){Es(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Es(t,a,e)}}var o=t.return;try{ou(t)}catch(e){Es(t,o,e)}break;case 5:var l=t.return;try{ou(t)}catch(e){Es(t,l,e)}}}catch(e){Es(t,t.return,e)}if(t===e){Gi=null;break}var i=t.sibling;if(null!==i){i.return=t.return,Gi=i;break}Gi=t.return}}var Su,Eu=Math.ceil,xu=w.ReactCurrentDispatcher,_u=w.ReactCurrentOwner,Pu=w.ReactCurrentBatchConfig,Bu=0,Tu=null,zu=null,Lu=0,Ru=0,Nu=Sa(0),Du=0,Ou=null,Mu=0,Fu=0,Uu=0,Iu=null,ju=null,Hu=0,Wu=1/0,Vu=null,$u=!1,Qu=null,qu=null,Yu=!1,Zu=null,Ku=0,Xu=0,Ju=null,Gu=-1,es=0;function ts(){return 0!=(6&Bu)?Xe():-1!==Gu?Gu:Gu=Xe()}function ns(e){return 0==(1&e.mode)?1:0!=(2&Bu)&&0!==Lu?Lu&-Lu:null!==vo.transition?(0===es&&(es=mt()),es):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function rs(e,t,n,r){if(50<Xu)throw Xu=0,Ju=null,Error(o(185));gt(e,n,r),0!=(2&Bu)&&e===Tu||(e===Tu&&(0==(2&Bu)&&(Fu|=n),4===Du&&us(e,Lu)),as(e,r),1===n&&0===Bu&&0==(1&t.mode)&&(Wu=Xe()+500,Ua&&Ha()))}function as(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var l=31-lt(o),i=1<<l,u=a[l];-1===u?0!=(i&n)&&0==(i&r)||(a[l]=pt(i,t)):u<=t&&(e.expiredLanes|=i),o&=~i}}(e,t);var r=ft(e,e===Tu?Lu:0);if(0===r)null!==n&&Ye(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ye(n),1===t)0===e.tag?function(e){Ua=!0,ja(e)}(ss.bind(null,e)):ja(ss.bind(null,e)),la((function(){0==(6&Bu)&&Ha()})),n=null;else{switch(wt(r)){case 1:n=Ge;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ts(n,os.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function os(e,t){if(Gu=-1,es=0,0!=(6&Bu))throw Error(o(327));var n=e.callbackNode;if(ks()&&e.callbackNode!==n)return null;var r=ft(e,e===Tu?Lu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=gs(e,r);else{t=r;var a=Bu;Bu|=2;var l=ms();for(Tu===e&&Lu===t||(Vu=null,Wu=Xe()+500,ps(e,t));;)try{bs();break}catch(t){hs(e,t)}Co(),xu.current=l,Bu=a,null!==zu?t=0:(Tu=null,Lu=0,t=Du)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=ls(e,a)),1===t)throw n=Ou,ps(e,0),us(e,r),as(e,Xe()),n;if(6===t)us(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!ir(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=gs(e,r))&&0!==(l=ht(e))&&(r=l,t=ls(e,l)),1===t))throw n=Ou,ps(e,0),us(e,r),as(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:Cs(e,ju,Vu);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=Hu+500-Xe())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){ts(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Cs.bind(null,e,ju,Vu),t);break}Cs(e,ju,Vu);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var i=31-lt(r);l=1<<i,(i=t[i])>a&&(a=i),r&=~l}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Eu(r/1960))-r)){e.timeoutHandle=ra(Cs.bind(null,e,ju,Vu),r);break}Cs(e,ju,Vu);break;default:throw Error(o(329))}}}return as(e,Xe()),e.callbackNode===n?os.bind(null,e):null}function ls(e,t){var n=Iu;return e.current.memoizedState.isDehydrated&&(ps(e,t).flags|=256),2!==(e=gs(e,t))&&(t=ju,ju=n,null!==t&&is(t)),e}function is(e){null===ju?ju=e:ju.push.apply(ju,e)}function us(e,t){for(t&=~Uu,t&=~Fu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-lt(t),r=1<<n;e[n]=-1,t&=~r}}function ss(e){if(0!=(6&Bu))throw Error(o(327));ks();var t=ft(e,0);if(0==(1&t))return as(e,Xe()),null;var n=gs(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ls(e,r))}if(1===n)throw n=Ou,ps(e,0),us(e,t),as(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cs(e,ju,Vu),as(e,Xe()),null}function cs(e,t){var n=Bu;Bu|=1;try{return e(t)}finally{0===(Bu=n)&&(Wu=Xe()+500,Ua&&Ha())}}function ds(e){null!==Zu&&0===Zu.tag&&0==(6&Bu)&&ks();var t=Bu;Bu|=1;var n=Pu.transition,r=bt;try{if(Pu.transition=null,bt=1,e)return e()}finally{bt=r,Pu.transition=n,0==(6&(Bu=t))&&Ha()}}function fs(){Ru=Nu.current,Ea(Nu)}function ps(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==zu)for(n=zu.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ra();break;case 3:ol(),Ea(Ba),Ea(Pa),dl();break;case 5:il(r);break;case 4:ol();break;case 13:case 19:Ea(ul);break;case 10:ko(r.type._context);break;case 22:case 23:fs()}n=n.return}if(Tu=e,zu=e=Ns(e.current,null),Lu=Ru=t,Du=0,Ou=null,Uu=Fu=Mu=0,ju=Iu=null,null!==_o){for(t=0;t<_o.length;t++)if(null!==(r=(n=_o[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var l=o.next;o.next=a,r.next=l}n.pending=r}_o=null}return e}function hs(e,t){for(;;){var n=zu;try{if(Co(),fl.current=li,yl){for(var r=ml.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}yl=!1}if(hl=0,gl=vl=ml=null,bl=!1,wl=0,_u.current=null,null===n||null===n.return){Du=1,Ou=t,zu=null;break}e:{var l=e,i=n.return,u=n,s=t;if(t=Lu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,d=u,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=gi(i);if(null!==h){h.flags&=-257,yi(h,i,u,0,t),1&h.mode&&vi(l,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(s),t.updateQueue=v}else m.add(s);break e}if(0==(1&t)){vi(l,c,t),vs();break e}s=Error(o(426))}else if(ao&&1&u.mode){var g=gi(i);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),yi(g,i,u,0,t),mo(ci(s,u));break e}}l=s=ci(s,u),4!==Du&&(Du=2),null===Iu?Iu=[l]:Iu.push(l),l=i;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t,Mo(l,hi(0,s,t));break e;case 1:u=s;var y=l.type,b=l.stateNode;if(0==(128&l.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===qu||!qu.has(b)))){l.flags|=65536,t&=-t,l.lanes|=t,Mo(l,mi(l,u,t));break e}}l=l.return}while(null!==l)}As(n)}catch(e){t=e,zu===n&&null!==n&&(zu=n=n.return);continue}break}}function ms(){var e=xu.current;return xu.current=li,null===e?li:e}function vs(){0!==Du&&3!==Du&&2!==Du||(Du=4),null===Tu||0==(268435455&Mu)&&0==(268435455&Fu)||us(Tu,Lu)}function gs(e,t){var n=Bu;Bu|=2;var r=ms();for(Tu===e&&Lu===t||(Vu=null,ps(e,t));;)try{ys();break}catch(t){hs(e,t)}if(Co(),Bu=n,xu.current=r,null!==zu)throw Error(o(261));return Tu=null,Lu=0,Du}function ys(){for(;null!==zu;)ws(zu)}function bs(){for(;null!==zu&&!Ze();)ws(zu)}function ws(e){var t=Su(e.alternate,e,Ru);e.memoizedProps=e.pendingProps,null===t?As(e):zu=t,_u.current=null}function As(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Yi(n,t,Ru)))return void(zu=n)}else{if(null!==(n=Zi(n,t)))return n.flags&=32767,void(zu=n);if(null===e)return Du=6,void(zu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(zu=t);zu=t=e}while(null!==t);0===Du&&(Du=5)}function Cs(e,t,n){var r=bt,a=Pu.transition;try{Pu.transition=null,bt=1,function(e,t,n,r){do{ks()}while(null!==Zu);if(0!=(6&Bu))throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var l=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-lt(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,l),e===Tu&&(zu=Tu=null,Lu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Yu||(Yu=!0,Ts(tt,(function(){return ks(),null}))),l=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||l){l=Pu.transition,Pu.transition=null;var i=bt;bt=1;var u=Bu;Bu|=4,_u.current=null,function(e,t){if(ea=Vt,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==a&&3!==f.nodeType||(u=i+a),f!==l||0!==r&&3!==f.nodeType||(s=i+r),3===f.nodeType&&(i+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===a&&(u=i),p===l&&++d===r&&(s=i),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Vt=!1,Gi=t;null!==Gi;)if(e=(t=Gi).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Gi=e;else for(;null!==Gi;){t=Gi;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,g=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?v:go(t.type,v),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(o(163))}}catch(e){Es(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Gi=e;break}Gi=t.return}m=nu,nu=!1}(e,n),gu(n,e),hr(ta),Vt=!!ea,ta=ea=null,e.current=n,bu(n,e,a),Ke(),Bu=u,bt=i,Pu.transition=l}else e.current=n;if(Yu&&(Yu=!1,Zu=e,Ku=a),0===(l=e.pendingLanes)&&(qu=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),as(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if($u)throw $u=!1,e=Qu,Qu=null,e;0!=(1&Ku)&&0!==e.tag&&ks(),0!=(1&(l=e.pendingLanes))?e===Ju?Xu++:(Xu=0,Ju=e):Xu=0,Ha()}(e,t,n,r)}finally{Pu.transition=a,bt=r}return null}function ks(){if(null!==Zu){var e=wt(Ku),t=Pu.transition,n=bt;try{if(Pu.transition=null,bt=16>e?16:e,null===Zu)var r=!1;else{if(e=Zu,Zu=null,Ku=0,0!=(6&Bu))throw Error(o(331));var a=Bu;for(Bu|=4,Gi=e.current;null!==Gi;){var l=Gi,i=l.child;if(0!=(16&Gi.flags)){var u=l.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Gi=c;null!==Gi;){var d=Gi;switch(d.tag){case 0:case 11:case 15:ru(8,d,l)}var f=d.child;if(null!==f)f.return=d,Gi=f;else for(;null!==Gi;){var p=(d=Gi).sibling,h=d.return;if(lu(d),d===c){Gi=null;break}if(null!==p){p.return=h,Gi=p;break}Gi=h}}}var m=l.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Gi=l}}if(0!=(2064&l.subtreeFlags)&&null!==i)i.return=l,Gi=i;else e:for(;null!==Gi;){if(0!=(2048&(l=Gi).flags))switch(l.tag){case 0:case 11:case 15:ru(9,l,l.return)}var y=l.sibling;if(null!==y){y.return=l.return,Gi=y;break e}Gi=l.return}}var b=e.current;for(Gi=b;null!==Gi;){var w=(i=Gi).child;if(0!=(2064&i.subtreeFlags)&&null!==w)w.return=i,Gi=w;else e:for(i=b;null!==Gi;){if(0!=(2048&(u=Gi).flags))try{switch(u.tag){case 0:case 11:case 15:au(9,u)}}catch(e){Es(u,u.return,e)}if(u===i){Gi=null;break e}var A=u.sibling;if(null!==A){A.return=u.return,Gi=A;break e}Gi=u.return}}if(Bu=a,Ha(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Pu.transition=t}}return!1}function Ss(e,t,n){e=Do(e,t=hi(0,t=ci(n,t),1),1),t=ts(),null!==e&&(gt(e,1,t),as(e,t))}function Es(e,t,n){if(3===e.tag)Ss(e,e,n);else for(;null!==t;){if(3===t.tag){Ss(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r))){t=Do(t,e=mi(t,e=ci(n,e),1),1),e=ts(),null!==t&&(gt(t,1,e),as(t,e));break}}t=t.return}}function xs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ts(),e.pingedLanes|=e.suspendedLanes&n,Tu===e&&(Lu&n)===n&&(4===Du||3===Du&&(130023424&Lu)===Lu&&500>Xe()-Hu?ps(e,0):Uu|=n),as(e,t)}function _s(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=ts();null!==(e=To(e,t))&&(gt(e,t,n),as(e,n))}function Ps(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),_s(e,n)}function Bs(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),_s(e,n)}function Ts(e,t){return qe(e,t)}function zs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ls(e,t,n,r){return new zs(e,t,n,r)}function Rs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ns(e,t){var n=e.alternate;return null===n?((n=Ls(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ds(e,t,n,r,a,l){var i=2;if(r=e,"function"==typeof e)Rs(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case k:return Os(n.children,a,l,t);case S:i=8,a|=8;break;case E:return(e=Ls(12,n,t,2|a)).elementType=E,e.lanes=l,e;case B:return(e=Ls(13,n,t,a)).elementType=B,e.lanes=l,e;case T:return(e=Ls(19,n,t,a)).elementType=T,e.lanes=l,e;case R:return Ms(n,a,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:i=10;break e;case _:i=9;break e;case P:i=11;break e;case z:i=14;break e;case L:i=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ls(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function Os(e,t,n,r){return(e=Ls(7,e,r,t)).lanes=n,e}function Ms(e,t,n,r){return(e=Ls(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function Fs(e,t,n){return(e=Ls(6,e,null,t)).lanes=n,e}function Us(e,t,n){return(t=Ls(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Is(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function js(e,t,n,r,a,o,l,i,u){return e=new Is(e,t,n,i,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Ls(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Lo(o),e}function Hs(e){if(!e)return _a;e:{if(He(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(La(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(La(n))return Da(e,n,t)}return t}function Ws(e,t,n,r,a,o,l,i,u){return(e=js(n,r,!0,e,0,o,0,i,u)).context=Hs(null),n=e.current,(o=No(r=ts(),a=ns(n))).callback=null!=t?t:null,Do(n,o,a),e.current.lanes=a,gt(e,a,r),as(e,r),e}function Vs(e,t,n,r){var a=t.current,o=ts(),l=ns(a);return n=Hs(n),null===t.context?t.context=n:t.pendingContext=n,(t=No(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Do(a,t,l))&&(rs(e,a,l,o),Oo(e,a,l)),l}function $s(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Qs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qs(e,t){Qs(e,t),(e=e.alternate)&&Qs(e,t)}Su=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ba.current)wi=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wi=!1,function(e,t,n){switch(t.tag){case 3:Ti(t),ho();break;case 5:ll(t);break;case 1:La(t.type)&&Oa(t);break;case 4:al(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;xa(yo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xa(ul,1&ul.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Fi(e,t,n):(xa(ul,1&ul.current),null!==(e=$i(e,t,n))?e.sibling:null);xa(ul,1&ul.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Wi(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),xa(ul,ul.current),r)break;return null;case 22:case 23:return t.lanes=0,Ei(e,t,n)}return $i(e,t,n)}(e,t,n);wi=0!=(131072&e.flags)}else wi=!1,ao&&0!=(1048576&t.flags)&&Ga(t,Qa,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vi(e,t),e=t.pendingProps;var a=za(t,Pa.current);Eo(t,n),a=Sl(null,t,r,e,a,n);var l=El();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,La(r)?(l=!0,Oa(t)):l=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Lo(t),a.updater=Ho,t.stateNode=a,a._reactInternals=t,Qo(t,r,e,n),t=Bi(null,t,r,!0,l,n)):(t.tag=0,ao&&l&&eo(t),Ai(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vi(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Rs(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===z)return 14}return 2}(r),e=go(r,e),a){case 0:t=_i(null,t,r,e,n);break e;case 1:t=Pi(null,t,r,e,n);break e;case 11:t=Ci(null,t,r,e,n);break e;case 14:t=ki(null,t,r,go(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,_i(e,t,r,a=t.elementType===r?a:go(r,a),n);case 1:return r=t.type,a=t.pendingProps,Pi(e,t,r,a=t.elementType===r?a:go(r,a),n);case 3:e:{if(Ti(t),null===e)throw Error(o(387));r=t.pendingProps,a=(l=t.memoizedState).element,Ro(e,t),Fo(t,r,null,n);var i=t.memoizedState;if(r=i.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=zi(e,t,r,n,a=ci(Error(o(423)),t));break e}if(r!==a){t=zi(e,t,r,n,a=ci(Error(o(424)),t));break e}for(ro=sa(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=Jo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===a){t=$i(e,t,n);break e}Ai(e,t,r,n)}t=t.child}return t;case 5:return ll(t),null===e&&so(t),r=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,i=a.children,na(r,a)?i=null:null!==l&&na(r,l)&&(t.flags|=32),xi(e,t),Ai(e,t,i,n),t.child;case 6:return null===e&&so(t),null;case 13:return Fi(e,t,n);case 4:return al(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xo(t,null,r,n):Ai(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Ci(e,t,r,a=t.elementType===r?a:go(r,a),n);case 7:return Ai(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ai(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,l=t.memoizedProps,i=a.value,xa(yo,r._currentValue),r._currentValue=i,null!==l)if(ir(l.value,i)){if(l.children===a.children&&!Ba.current){t=$i(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){i=l.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===l.tag){(s=No(-1,n&-n)).tag=2;var c=l.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?s.next=s:(s.next=d.next,d.next=s),c.pending=s}}l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),So(l.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===l.tag)i=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),So(i,n,t),i=l.sibling}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===t){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}Ai(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Eo(t,n),r=r(a=xo(a)),t.flags|=1,Ai(e,t,r,n),t.child;case 14:return a=go(r=t.type,t.pendingProps),ki(e,t,r,a=go(r.type,a),n);case 15:return Si(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:go(r,a),Vi(e,t),t.tag=1,La(r)?(e=!0,Oa(t)):e=!1,Eo(t,n),Vo(t,r,a),Qo(t,r,a,n),Bi(null,t,r,!0,e,n);case 19:return Wi(e,t,n);case 22:return Ei(e,t,n)}throw Error(o(156,t.tag))};var Ys="function"==typeof reportError?reportError:function(e){console.error(e)};function Zs(e){this._internalRoot=e}function Ks(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Gs(){}function ec(e,t,n,r,a){var o=n._reactRootContainer;if(o){var l=o;if("function"==typeof a){var i=a;a=function(){var e=$s(l);i.call(e)}}Vs(t,l,e,a)}else l=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=$s(l);o.call(e)}}var l=Ws(t,r,e,0,null,!1,0,"",Gs);return e._reactRootContainer=l,e[ha]=l.current,Hr(8===e.nodeType?e.parentNode:e),ds(),l}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var i=r;r=function(){var e=$s(u);i.call(e)}}var u=js(e,0,!1,null,0,!1,0,"",Gs);return e._reactRootContainer=u,e[ha]=u.current,Hr(8===e.nodeType?e.parentNode:e),ds((function(){Vs(t,u,n,r)})),u}(n,t,e,a,r);return $s(l)}Ks.prototype.render=Zs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Vs(e,t,null,null)},Ks.prototype.unmount=Zs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;ds((function(){Vs(null,e,null,null)})),t[ha]=null}},Ks.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&Mt(e)}},At=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),as(t,Xe()),0==(6&Bu)&&(Wu=Xe()+500,Ha()))}break;case 13:ds((function(){var t=To(e,1);if(null!==t){var n=ts();rs(t,e,1,n)}})),qs(e,1)}},Ct=function(e){if(13===e.tag){var t=To(e,134217728);null!==t&&rs(t,e,134217728,ts()),qs(e,134217728)}},kt=function(e){if(13===e.tag){var t=ns(e),n=To(e,t);null!==n&&rs(n,e,t,ts()),qs(e,t)}},St=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ce=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Aa(r);if(!a)throw Error(o(90));q(r),J(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=cs,Be=ds;var tc={usingClientEntryPoint:!1,Events:[ba,wa,Aa,xe,_e,cs]},nc={findFiberByHostInstance:ya,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=$e(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{at=ac.inject(rc),ot=ac}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(o(299));var n=!1,r="",a=Ys;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=js(e,1,!1,null,0,n,0,r,a),e[ha]=t.current,Hr(8===e.nodeType?e.parentNode:e),new Zs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=$e(t))?null:e.stateNode},t.flushSync=function(e){return ds(e)},t.hydrate=function(e,t,n){if(!Js(t))throw Error(o(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,l="",i=Ys;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),t=Ws(t,null,e,1,null!=n?n:null,a,0,l,i),e[ha]=t.current,Hr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Ks(t)},t.render=function(e,t,n){if(!Js(t))throw Error(o(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Js(e))throw Error(o(40));return!!e._reactRootContainer&&(ds((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=cs,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Js(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var w=b.prototype=new y;w.constructor=b,m(w,g.prototype),w.isPureReactComponent=!0;var A=Array.isArray,C=Object.prototype.hasOwnProperty,k={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var a,o={},l=null,i=null;if(null!=t)for(a in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)C.call(t,a)&&!S.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:l,ref:i,props:o,_owner:k.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function B(e,t,a,o,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return l=l(u=e),e=""===o?"."+P(u,0):o,A(l)?(a="",null!=e&&(a=e.replace(_,"$&/")+"/"),B(l,t,a,"",(function(e){return e}))):null!=l&&(x(l)&&(l=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,a+(!l.key||u&&u.key===l.key?"":(""+l.key).replace(_,"$&/")+"/")+e)),t.push(l)),1;if(u=0,o=""===o?".":o+":",A(e))for(var s=0;s<e.length;s++){var c=o+P(i=e[s],s);u+=B(i,t,a,c,l)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(i=e.next()).done;)u+=B(i=i.value,t,a,c=o+P(i,s++),l);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function T(e,t,n){if(null==e)return e;var r=[],a=0;return B(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function z(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},R={transition:null},N={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:R,ReactCurrentOwner:k};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=a,t.Profiler=l,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),o=e.key,l=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,i=k.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)C.call(t,s)&&!S.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:l,props:a,_owner:i}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:z}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return L.current.useCallback(e,t)},t.useContext=function(e){return L.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return L.current.useDeferredValue(e)},t.useEffect=function(e,t){return L.current.useEffect(e,t)},t.useId=function(){return L.current.useId()},t.useImperativeHandle=function(e,t,n){return L.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return L.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return L.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return L.current.useMemo(e,t)},t.useReducer=function(e,t,n){return L.current.useReducer(e,t,n)},t.useRef=function(e){return L.current.useRef(e)},t.useState=function(e){return L.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return L.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return L.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{e.exports=n(408)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,l=a>>>1;r<l;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],d=1,f=null,p=3,h=!1,m=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function A(e){if(v=!1,w(e),!m)if(null!==r(s))m=!0,R(C);else{var t=r(c);null!==t&&N(A,t.startTime-e)}}function C(e,n){m=!1,v&&(v=!1,y(x),x=-1),h=!0;var o=p;try{for(w(n),f=r(s);null!==f&&(!(f.expirationTime>n)||e&&!B());){var l=f.callback;if("function"==typeof l){f.callback=null,p=f.priorityLevel;var i=l(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?f.callback=i:f===r(s)&&a(s),w(n)}else a(s);f=r(s)}if(null!==f)var u=!0;else{var d=r(c);null!==d&&N(A,d.startTime-n),u=!1}return u}finally{f=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,S=!1,E=null,x=-1,_=5,P=-1;function B(){return!(t.unstable_now()-P<_)}function T(){if(null!==E){var e=t.unstable_now();P=e;var n=!0;try{n=E(!0,e)}finally{n?k():(S=!1,E=null)}}else S=!1}if("function"==typeof b)k=function(){b(T)};else if("undefined"!=typeof MessageChannel){var z=new MessageChannel,L=z.port2;z.port1.onmessage=T,k=function(){L.postMessage(null)}}else k=function(){g(T,0)};function R(e){E=e,S||(S=!0,k())}function N(e,n){x=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,R(C))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>l?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(v?(y(x),x=-1):v=!0,N(A,o-l))):(e.sortIndex=i,n(s,e),m||h||(m=!0,R(C))),e},t.unstable_shouldYield=B,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{e.exports=n(53)},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},l=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=o[s]||0,d="".concat(s," ").concat(c);o[s]=c+1;var f=n(d),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=a(p,r);r.byIndex=i,t.splice(i,0,{identifier:d,updater:h,references:1})}l.push(d)}return l}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var l=0;l<o.length;l++){var i=n(o[l]);t[i].references--}for(var u=r(e,a),s=0;s<o.length;s++){var c=n(o[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},950:(e,t,n)=>{e.exports=n.p+"2017bdb174a62d0daa3e.ttf"},126:(e,t,n)=>{e.exports=n.p+"3c212826a30bc13b412c.ttf"},13:(e,t,n)=>{e.exports=n.p+"7228a1c750b75b23bdb4.ttf"},567:(e,t,n)=>{e.exports=n.p+"5bc7a549ccb9e7288f69.jpeg"}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e](o,o.exports,a),o.exports}a.m=n,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var l={};e=e||[null,t({}),t([]),t(t)];for(var i=2&r&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>l[e]=()=>n[e]));return l.default=()=>n,a.d(o,l),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.p="/",a.b=document.baseURI||self.location.href,a.nc=void 0,(()=>{var e,t=a(294),n=a.t(t,2),r=a(745),o=a(935),l=a.t(o,2);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const u="popstate";function s(e,t){if(!1===e||null==e)throw new Error(t)}function c(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function d(e,t){return{usr:e.state,key:e.key,idx:t}}function f(e,t,n,r){return void 0===n&&(n=null),i({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?h(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function p(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function h(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var m;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(m||(m={}));const v=new Set(["lazy","caseSensitive","path","id","index","children"]);function g(e,t,n,r){return void 0===n&&(n=[]),void 0===r&&(r={}),e.map(((e,a)=>{let o=[...n,a],l="string"==typeof e.id?e.id:o.join("-");if(s(!0!==e.index||!e.children,"Cannot specify children on an index route"),s(!r[l],'Found a route id collision on id "'+l+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let n=i({},e,t(e),{id:l});return r[l]=n,n}{let n=i({},e,t(e),{id:l,children:void 0});return r[l]=n,e.children&&(n.children=g(e.children,t,o,r)),n}}))}function y(e,t,n){void 0===n&&(n="/");let r=L(("string"==typeof t?h(t):t).pathname||"/",n);if(null==r)return null;let a=b(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=B(a[e],z(r));return o}function b(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let l={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};l.relativePath.startsWith("/")&&(s(l.relativePath.startsWith(r),'Absolute route path "'+l.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(r.length));let i=M([r,l.relativePath]),u=n.concat(l);e.children&&e.children.length>0&&(s(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),b(e.children,t,u,i)),(null!=e.path||e.index)&&t.push({path:i,score:P(i,e.index),routesMeta:u})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of w(e.path))a(e,t,n);else a(e,t)})),t}function w(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let l=w(r.join("/")),i=[];return i.push(...l.map((e=>""===e?o:[o,e].join("/")))),a&&i.push(...l),i.map((t=>e.startsWith("/")&&""===t?"/":t))}const A=/^:[\w-]+$/,C=3,k=2,S=1,E=10,x=-2,_=e=>"*"===e;function P(e,t){let n=e.split("/"),r=n.length;return n.some(_)&&(r+=x),t&&(r+=k),n.filter((e=>!_(e))).reduce(((e,t)=>e+(A.test(t)?C:""===t?S:E)),r)}function B(e,t){let{routesMeta:n}=e,r={},a="/",o=[];for(let e=0;e<n.length;++e){let l=n[e],i=e===n.length-1,u="/"===a?t:t.slice(a.length)||"/",s=T({path:l.relativePath,caseSensitive:l.caseSensitive,end:i},u);if(!s)return null;Object.assign(r,s.params);let c=l.route;o.push({params:r,pathname:M([a,s.pathname]),pathnameBase:F(M([a,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(a=M([a,s.pathnameBase]))}return o}function T(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),c("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],l=o.replace(/(.)\/+$/,"$1"),i=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=i[n]||"";l=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const u=i[n];return e[r]=a&&!u?void 0:function(e,t){try{return decodeURIComponent(e)}catch(n){return c(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(u||"",r),e}),{}),pathname:o,pathnameBase:l,pattern:e}}function z(e){try{return decodeURI(e)}catch(t){return c(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function L(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function R(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function N(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function D(e,t){let n=N(e);return t?n.map(((t,n)=>n===e.length-1?t.pathname:t.pathnameBase)):n.map((e=>e.pathnameBase))}function O(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=h(e):(a=i({},e),s(!a.pathname||!a.pathname.includes("?"),R("?","pathname","search",a)),s(!a.pathname||!a.pathname.includes("#"),R("#","pathname","hash",a)),s(!a.search||!a.search.includes("#"),R("#","search","hash",a)));let o,l=""===e||""===a.pathname,u=l?"/":a.pathname;if(null==u)o=n;else{let e=t.length-1;if(!r&&u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?h(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:U(r),hash:I(a)}}(a,o),d=u&&"/"!==u&&u.endsWith("/"),f=(l||"."===u)&&n.endsWith("/");return c.pathname.endsWith("/")||!d&&!f||(c.pathname+="/"),c}const M=e=>e.join("/").replace(/\/\/+/g,"/"),F=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),U=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",I=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;class j{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function H(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const W=["post","put","patch","delete"],V=new Set(W),$=["get",...W],Q=new Set($),q=new Set([301,302,303,307,308]),Y=new Set([307,308]),Z={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},K={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},X={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},J=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,G=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),ee="remix-router-transitions";function te(e,t,n,r,a,o,l,i){let u,s;if(l){u=[];for(let e of t)if(u.push(e),e.route.id===l){s=e;break}}else u=t,s=t[t.length-1];let c=O(a||".",D(u,o),L(e.pathname,n)||e.pathname,"path"===i);return null==a&&(c.search=e.search,c.hash=e.hash),null!=a&&""!==a&&"."!==a||!s||!s.route.index||Se(c.search)||(c.search=c.search?c.search.replace(/^\?/,"?index&"):"?index"),r&&"/"!==n&&(c.pathname="/"===c.pathname?n:M([n,c.pathname])),p(c)}function ne(e,t,n,r){if(!r||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(r))return{path:n};if(r.formMethod&&(a=r.formMethod,!Q.has(a.toLowerCase())))return{path:n,error:me(405,{method:r.formMethod})};var a;let o,l,i=()=>({path:n,error:me(400,{type:"invalid-body"})}),u=r.formMethod||"get",c=e?u.toUpperCase():u.toLowerCase(),d=ge(n);if(void 0!==r.body){if("text/plain"===r.formEncType){if(!Ae(c))return i();let e="string"==typeof r.body?r.body:r.body instanceof FormData||r.body instanceof URLSearchParams?Array.from(r.body.entries()).reduce(((e,t)=>{let[n,r]=t;return""+e+n+"="+r+"\n"}),""):String(r.body);return{path:n,submission:{formMethod:c,formAction:d,formEncType:r.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===r.formEncType){if(!Ae(c))return i();try{let e="string"==typeof r.body?JSON.parse(r.body):r.body;return{path:n,submission:{formMethod:c,formAction:d,formEncType:r.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return i()}}}if(s("function"==typeof FormData,"FormData is not available in this environment"),r.formData)o=se(r.formData),l=r.formData;else if(r.body instanceof FormData)o=se(r.body),l=r.body;else if(r.body instanceof URLSearchParams)o=r.body,l=ce(o);else if(null==r.body)o=new URLSearchParams,l=new FormData;else try{o=new URLSearchParams(r.body),l=ce(o)}catch(e){return i()}let f={formMethod:c,formAction:d,formEncType:r&&r.formEncType||"application/x-www-form-urlencoded",formData:l,json:void 0,text:void 0};if(Ae(f.formMethod))return{path:n,submission:f};let m=h(n);return t&&m.search&&Se(m.search)&&o.append("index",""),m.search="?"+o,{path:p(m),submission:f}}function re(e,t,n,r,a,o,l,u,s,c,d,f,p,h,m,v){let g=v?Object.values(v)[0]:m?Object.values(m)[0]:void 0,b=e.createURL(t.location),w=e.createURL(a),A=v?Object.keys(v)[0]:void 0,C=function(e,t){let n=e;if(t){let r=e.findIndex((e=>e.route.id===t));r>=0&&(n=e.slice(0,r))}return n}(n,A).filter(((e,n)=>{let{route:a}=e;if(a.lazy)return!0;if(null==a.loader)return!1;if(o)return!!a.loader.hydrate||void 0===t.loaderData[a.id]&&(!t.errors||void 0===t.errors[a.id]);if(function(e,t,n){let r=!t||n.route.id!==t.route.id,a=void 0===e[n.route.id];return r||a}(t.loaderData,t.matches[n],e)||u.some((t=>t===e.route.id)))return!0;let s=t.matches[n],c=e;return oe(e,i({currentUrl:b,currentParams:s.params,nextUrl:w,nextParams:c.params},r,{actionResult:g,defaultShouldRevalidate:l||b.pathname+b.search===w.pathname+w.search||b.search!==w.search||ae(s,c)}))})),k=[];return d.forEach(((e,a)=>{if(o||!n.some((t=>t.route.id===e.routeId))||c.has(a))return;let u=y(p,e.path,h);if(!u)return void k.push({key:a,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let d=t.fetchers.get(a),m=Ee(u,e.path),v=!1;v=!f.has(a)&&(!!s.includes(a)||(d&&"idle"!==d.state&&void 0===d.data?l:oe(m,i({currentUrl:b,currentParams:t.matches[t.matches.length-1].params,nextUrl:w,nextParams:n[n.length-1].params},r,{actionResult:g,defaultShouldRevalidate:l})))),v&&k.push({key:a,routeId:e.routeId,path:e.path,matches:u,match:m,controller:new AbortController})})),[C,k]}function ae(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function oe(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}async function le(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let a=n[e.id];s(a,"No route found in manifest");let o={};for(let e in r){let t=void 0!==a[e]&&"hasErrorBoundary"!==e;c(!t,'Route "'+a.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||v.has(e)||(o[e]=r[e])}Object.assign(a,o),Object.assign(a,i({},t(a),{lazy:void 0}))}async function ie(e,t,n,r,a,o,l,i,u){let c,d,f;void 0===u&&(u={});let p=e=>{let r,a=new Promise(((e,t)=>r=t));return f=()=>r(),t.signal.addEventListener("abort",f),Promise.race([e({request:t,params:n.params,context:u.requestContext}),a])};try{let r=n.route[e];if(n.route.lazy)if(r){let e,t=await Promise.all([p(r).catch((t=>{e=t})),le(n.route,o,a)]);if(e)throw e;d=t[0]}else{if(await le(n.route,o,a),r=n.route[e],!r){if("action"===e){let e=new URL(t.url),r=e.pathname+e.search;throw me(405,{method:t.method,pathname:r,routeId:n.route.id})}return{type:m.data,data:void 0}}d=await p(r)}else{if(!r){let e=new URL(t.url);throw me(404,{pathname:e.pathname+e.search})}d=await p(r)}s(void 0!==d,"You defined "+("action"===e?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){c=m.error,d=e}finally{f&&t.signal.removeEventListener("abort",f)}if(null!=(h=d)&&"number"==typeof h.status&&"string"==typeof h.statusText&&"object"==typeof h.headers&&void 0!==h.body){let e,a=d.status;if(q.has(a)){let e=d.headers.get("Location");if(s(e,"Redirects returned/thrown from loaders/actions must have a Location header"),J.test(e)){if(!u.isStaticRequest){let n=new URL(t.url),r=e.startsWith("//")?new URL(n.protocol+e):new URL(e),a=null!=L(r.pathname,l);r.origin===n.origin&&a&&(e=r.pathname+r.search+r.hash)}}else e=te(new URL(t.url),r.slice(0,r.indexOf(n)+1),l,!0,e,i);if(u.isStaticRequest)throw d.headers.set("Location",e),d;return{type:m.redirect,status:a,location:e,revalidate:null!==d.headers.get("X-Remix-Revalidate"),reloadDocument:null!==d.headers.get("X-Remix-Reload-Document")}}if(u.isRouteRequest)throw{type:c===m.error?m.error:m.data,response:d};try{let t=d.headers.get("Content-Type");e=t&&/\bapplication\/json\b/.test(t)?null==d.body?null:await d.json():await d.text()}catch(e){return{type:m.error,error:e}}return c===m.error?{type:c,error:new j(a,d.statusText,e),headers:d.headers}:{type:m.data,data:e,statusCode:d.status,headers:d.headers}}var h,v,g;return c===m.error?{type:c,error:d}:function(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}(d)?{type:m.deferred,deferredData:d,statusCode:null==(v=d.init)?void 0:v.status,headers:(null==(g=d.init)?void 0:g.headers)&&new Headers(d.init.headers)}:{type:m.data,data:d}}function ue(e,t,n,r){let a=e.createURL(ge(t)).toString(),o={signal:n};if(r&&Ae(r.formMethod)){let{formMethod:e,formEncType:t}=r;o.method=e.toUpperCase(),"application/json"===t?(o.headers=new Headers({"Content-Type":t}),o.body=JSON.stringify(r.json)):"text/plain"===t?o.body=r.text:"application/x-www-form-urlencoded"===t&&r.formData?o.body=se(r.formData):o.body=r.formData}return new Request(a,o)}function se(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,"string"==typeof r?r:r.name);return t}function ce(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function de(e,t,n,r,a,o,l,u){let{loaderData:c,errors:d}=function(e,t,n,r,a){let o,l={},i=null,u=!1,c={};return n.forEach(((n,d)=>{let f=t[d].route.id;if(s(!we(n),"Cannot handle redirect results in processLoaderData"),be(n)){let t=pe(e,f),a=n.error;r&&(a=Object.values(r)[0],r=void 0),i=i||{},null==i[t.route.id]&&(i[t.route.id]=a),l[f]=void 0,u||(u=!0,o=H(n.error)?n.error.status:500),n.headers&&(c[f]=n.headers)}else ye(n)?(a.set(f,n.deferredData),l[f]=n.deferredData.data):l[f]=n.data,null==n.statusCode||200===n.statusCode||u||(o=n.statusCode),n.headers&&(c[f]=n.headers)})),r&&(i=r,l[Object.keys(r)[0]]=void 0),{loaderData:l,errors:i,statusCode:o||200,loaderHeaders:c}}(t,n,r,a,u);for(let t=0;t<o.length;t++){let{key:n,match:r,controller:a}=o[t];s(void 0!==l&&void 0!==l[t],"Did not find corresponding fetcher result");let u=l[t];if(!a||!a.signal.aborted)if(be(u)){let t=pe(e.matches,null==r?void 0:r.route.id);d&&d[t.route.id]||(d=i({},d,{[t.route.id]:u.error})),e.fetchers.delete(n)}else if(we(u))s(!1,"Unhandled fetcher revalidation redirect");else if(ye(u))s(!1,"Unhandled fetcher deferred data");else{let t=Be(u.data);e.fetchers.set(n,t)}}return{loaderData:c,errors:d}}function fe(e,t,n,r){let a=i({},t);for(let o of n){let n=o.route.id;if(t.hasOwnProperty(n)?void 0!==t[n]&&(a[n]=t[n]):void 0!==e[n]&&o.route.loader&&(a[n]=e[n]),r&&r.hasOwnProperty(n))break}return a}function pe(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function he(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function me(e,t){let{pathname:n,routeId:r,method:a,type:o}=void 0===t?{}:t,l="Unknown Server Error",i="Unknown @remix-run/router error";return 400===e?(l="Bad Request",a&&n&&r?i="You made a "+a+' request to "'+n+'" but did not provide a `loader` for route "'+r+'", so there is no way to handle the request.':"defer-action"===o?i="defer() is not supported in actions":"invalid-body"===o&&(i="Unable to encode submission body")):403===e?(l="Forbidden",i='Route "'+r+'" does not match URL "'+n+'"'):404===e?(l="Not Found",i='No route matches URL "'+n+'"'):405===e&&(l="Method Not Allowed",a&&n&&r?i="You made a "+a.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+r+'", so there is no way to handle the request.':a&&(i='Invalid request method "'+a.toUpperCase()+'"')),new j(e||500,l,new Error(i),!0)}function ve(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(we(n))return{result:n,idx:t}}}function ge(e){return p(i({},"string"==typeof e?h(e):e,{hash:""}))}function ye(e){return e.type===m.deferred}function be(e){return e.type===m.error}function we(e){return(e&&e.type)===m.redirect}function Ae(e){return V.has(e.toLowerCase())}async function Ce(e,t,n,r,a,o){for(let l=0;l<n.length;l++){let i=n[l],u=t[l];if(!u)continue;let c=e.find((e=>e.route.id===u.route.id)),d=null!=c&&!ae(c,u)&&void 0!==(o&&o[u.route.id]);if(ye(i)&&(a||d)){let e=r[l];s(e,"Expected an AbortSignal for revalidating fetcher deferred result"),await ke(i,e,a).then((e=>{e&&(n[l]=e||n[l])}))}}}async function ke(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:m.data,data:e.deferredData.unwrappedData}}catch(e){return{type:m.error,error:e}}return{type:m.data,data:e.deferredData.data}}}function Se(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Ee(e,t){let n="string"==typeof t?h(t).search:t.search;if(e[e.length-1].route.index&&Se(n||""))return e[e.length-1];let r=N(e);return r[r.length-1]}function xe(e){let{formMethod:t,formAction:n,formEncType:r,text:a,formData:o,json:l}=e;if(t&&n&&r)return null!=a?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:a}:null!=o?{formMethod:t,formAction:n,formEncType:r,formData:o,json:void 0,text:void 0}:void 0!==l?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:l,text:void 0}:void 0}function _e(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function Pe(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function Be(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function Te(){return Te=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Te.apply(this,arguments)}Symbol("deferred");const ze=t.createContext(null),Le=t.createContext(null),Re=t.createContext(null),Ne=t.createContext(null),De=t.createContext({outlet:null,matches:[],isDataRoute:!1}),Oe=t.createContext(null);function Me(){return null!=t.useContext(Ne)}function Fe(){return Me()||s(!1),t.useContext(Ne).location}function Ue(e){t.useContext(Re).static||t.useLayoutEffect(e)}function Ie(){let{isDataRoute:e}=t.useContext(De);return e?function(){let{router:e}=function(e){let n=t.useContext(ze);return n||s(!1),n}(qe.UseNavigateStable),n=Ze(Ye.UseNavigateStable),r=t.useRef(!1);Ue((()=>{r.current=!0}));let a=t.useCallback((function(t,a){void 0===a&&(a={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,Te({fromRouteId:n},a)))}),[e,n]);return a}():function(){Me()||s(!1);let e=t.useContext(ze),{basename:n,future:r,navigator:a}=t.useContext(Re),{matches:o}=t.useContext(De),{pathname:l}=Fe(),i=JSON.stringify(D(o,r.v7_relativeSplatPath)),u=t.useRef(!1);Ue((()=>{u.current=!0}));let c=t.useCallback((function(t,r){if(void 0===r&&(r={}),!u.current)return;if("number"==typeof t)return void a.go(t);let o=O(t,JSON.parse(i),l,"path"===r.relative);null==e&&"/"!==n&&(o.pathname="/"===o.pathname?n:M([n,o.pathname])),(r.replace?a.replace:a.push)(o,r.state,r)}),[n,a,i,l,e]);return c}()}function je(e,n){let{relative:r}=void 0===n?{}:n,{future:a}=t.useContext(Re),{matches:o}=t.useContext(De),{pathname:l}=Fe(),i=JSON.stringify(D(o,a.v7_relativeSplatPath));return t.useMemo((()=>O(e,JSON.parse(i),l,"path"===r)),[e,i,l,r])}function He(n,r,a,o){Me()||s(!1);let{navigator:l}=t.useContext(Re),{matches:i}=t.useContext(De),u=i[i.length-1],c=u?u.params:{},d=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let f,p=Fe();if(r){var m;let e="string"==typeof r?h(r):r;"/"===d||(null==(m=e.pathname)?void 0:m.startsWith(d))||s(!1),f=e}else f=p;let v=f.pathname||"/",g=y(n,{pathname:"/"===d?v:v.slice(d.length)||"/"}),b=function(e,n,r,a){var o;if(void 0===n&&(n=[]),void 0===r&&(r=null),void 0===a&&(a=null),null==e){var l;if(null==(l=r)||!l.errors)return null;e=r.matches}let i=e,u=null==(o=r)?void 0:o.errors;if(null!=u){let e=i.findIndex((e=>e.route.id&&(null==u?void 0:u[e.route.id])));e>=0||s(!1),i=i.slice(0,Math.min(i.length,e+1))}let c=!1,d=-1;if(r&&a&&a.v7_partialHydration)for(let e=0;e<i.length;e++){let t=i[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(d=e),t.route.id){let{loaderData:e,errors:n}=r,a=t.route.loader&&void 0===e[t.route.id]&&(!n||void 0===n[t.route.id]);if(t.route.lazy||a){c=!0,i=d>=0?i.slice(0,d+1):[i[0]];break}}}return i.reduceRight(((e,a,o)=>{let l,s=!1,f=null,p=null;var h;r&&(l=u&&a.route.id?u[a.route.id]:void 0,f=a.route.errorElement||Ve,c&&(d<0&&0===o?(Xe[h="route-fallback"]||(Xe[h]=!0),s=!0,p=null):d===o&&(s=!0,p=a.route.hydrateFallbackElement||null)));let m=n.concat(i.slice(0,o+1)),v=()=>{let n;return n=l?f:s?p:a.route.Component?t.createElement(a.route.Component,null):a.route.element?a.route.element:e,t.createElement(Qe,{match:a,routeContext:{outlet:e,matches:m,isDataRoute:null!=r},children:n})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===o)?t.createElement($e,{location:r.location,revalidation:r.revalidation,component:f,error:l,children:v(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):v()}),null)}(g&&g.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:M([d,l.encodeLocation?l.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?d:M([d,l.encodeLocation?l.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,a,o);return r&&b?t.createElement(Ne.Provider,{value:{location:Te({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:e.Pop}},b):b}function We(){let e=Ke(),n=H(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:a},r):null,null)}const Ve=t.createElement(We,null);class $e extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?t.createElement(De.Provider,{value:this.props.routeContext},t.createElement(Oe.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Qe(e){let{routeContext:n,match:r,children:a}=e,o=t.useContext(ze);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(De.Provider,{value:n},a)}var qe=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(qe||{}),Ye=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(Ye||{});function Ze(e){let n=function(e){let n=t.useContext(De);return n||s(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||s(!1),r.route.id}function Ke(){var e;let n=t.useContext(Oe),r=function(e){let n=t.useContext(Le);return n||s(!1),n}(Ye.UseRouteError),a=Ze(Ye.UseRouteError);return void 0!==n?n:null==(e=r.errors)?void 0:e[a]}const Xe={};function Je(n){let{basename:r="/",children:a=null,location:o,navigationType:l=e.Pop,navigator:i,static:u=!1,future:c}=n;Me()&&s(!1);let d=r.replace(/^\/*/,"/"),f=t.useMemo((()=>({basename:d,navigator:i,static:u,future:Te({v7_relativeSplatPath:!1},c)})),[d,c,i,u]);"string"==typeof o&&(o=h(o));let{pathname:p="/",search:m="",hash:v="",state:g=null,key:y="default"}=o,b=t.useMemo((()=>{let e=L(p,d);return null==e?null:{location:{pathname:e,search:m,hash:v,state:g,key:y},navigationType:l}}),[d,p,m,v,g,y,l]);return null==b?null:t.createElement(Re.Provider,{value:f},t.createElement(Ne.Provider,{children:a,value:b}))}function Ge(){return Ge=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ge.apply(this,arguments)}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const et=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"];function tt(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new j(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let a=new t(r.message);a.stack="",n[e]=a}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack="",n[e]=t}}else n[e]=r;return n}const nt=t.createContext({isTransitioning:!1}),rt=t.createContext(new Map),at=n.startTransition,ot=l.flushSync;function lt(e){ot?ot(e):e()}n.useId;class it{constructor(){this.status="pending",this.promise=new Promise(((e,t)=>{this.resolve=t=>{"pending"===this.status&&(this.status="resolved",e(t))},this.reject=e=>{"pending"===this.status&&(this.status="rejected",t(e))}}))}}function ut(e){let{fallbackElement:n,router:r,future:a}=e,[o,l]=t.useState(r.state),[i,u]=t.useState(),[s,c]=t.useState({isTransitioning:!1}),[d,f]=t.useState(),[p,h]=t.useState(),[m,v]=t.useState(),g=t.useRef(new Map),{v7_startTransition:y}=a||{},b=t.useCallback((e=>{y?function(e){at?at(e):e()}(e):e()}),[y]),w=t.useCallback(((e,t)=>{let{deletedFetchers:n,unstable_flushSync:a,unstable_viewTransitionOpts:o}=t;n.forEach((e=>g.current.delete(e))),e.fetchers.forEach(((e,t)=>{void 0!==e.data&&g.current.set(t,e.data)}));let i=null==r.window||"function"!=typeof r.window.document.startViewTransition;if(o&&!i){if(a){lt((()=>{p&&(d&&d.resolve(),p.skipTransition()),c({isTransitioning:!0,flushSync:!0,currentLocation:o.currentLocation,nextLocation:o.nextLocation})}));let t=r.window.document.startViewTransition((()=>{lt((()=>l(e)))}));return t.finished.finally((()=>{lt((()=>{f(void 0),h(void 0),u(void 0),c({isTransitioning:!1})}))})),void lt((()=>h(t)))}p?(d&&d.resolve(),p.skipTransition(),v({state:e,currentLocation:o.currentLocation,nextLocation:o.nextLocation})):(u(e),c({isTransitioning:!0,flushSync:!1,currentLocation:o.currentLocation,nextLocation:o.nextLocation}))}else a?lt((()=>l(e))):b((()=>l(e)))}),[r.window,p,d,g,b]);t.useLayoutEffect((()=>r.subscribe(w)),[r,w]),t.useEffect((()=>{s.isTransitioning&&!s.flushSync&&f(new it)}),[s]),t.useEffect((()=>{if(d&&i&&r.window){let e=i,t=d.promise,n=r.window.document.startViewTransition((async()=>{b((()=>l(e))),await t}));n.finished.finally((()=>{f(void 0),h(void 0),u(void 0),c({isTransitioning:!1})})),h(n)}}),[b,i,d,r.window]),t.useEffect((()=>{d&&i&&o.location.key===i.location.key&&d.resolve()}),[d,p,o.location,i]),t.useEffect((()=>{!s.isTransitioning&&m&&(u(m.state),c({isTransitioning:!0,flushSync:!1,currentLocation:m.currentLocation,nextLocation:m.nextLocation}),v(void 0))}),[s.isTransitioning,m]),t.useEffect((()=>{}),[]);let A=t.useMemo((()=>({createHref:r.createHref,encodeLocation:r.encodeLocation,go:e=>r.navigate(e),push:(e,t,n)=>r.navigate(e,{state:t,preventScrollReset:null==n?void 0:n.preventScrollReset}),replace:(e,t,n)=>r.navigate(e,{replace:!0,state:t,preventScrollReset:null==n?void 0:n.preventScrollReset})})),[r]),C=r.basename||"/",k=t.useMemo((()=>({router:r,navigator:A,static:!1,basename:C})),[r,A,C]);return t.createElement(t.Fragment,null,t.createElement(ze.Provider,{value:k},t.createElement(Le.Provider,{value:o},t.createElement(rt.Provider,{value:g.current},t.createElement(nt.Provider,{value:s},t.createElement(Je,{basename:C,location:o.location,navigationType:o.historyAction,navigator:A,future:{v7_relativeSplatPath:r.future.v7_relativeSplatPath}},o.initialized||r.future.v7_partialHydration?t.createElement(st,{routes:r.routes,future:r.future,state:o}):n))))),null)}function st(e){let{routes:t,future:n,state:r}=e;return He(t,void 0,r,n)}const ct="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,dt=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ft=t.forwardRef((function(e,n){let r,{onClick:a,relative:o,reloadDocument:l,replace:i,state:u,target:c,to:d,preventScrollReset:f,unstable_viewTransition:h}=e,m=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,et),{basename:v}=t.useContext(Re),g=!1;if("string"==typeof d&&dt.test(d)&&(r=d,ct))try{let e=new URL(window.location.href),t=d.startsWith("//")?new URL(e.protocol+d):new URL(d),n=L(t.pathname,v);t.origin===e.origin&&null!=n?d=n+t.search+t.hash:g=!0}catch(e){}let y=function(e,n){let{relative:r}=void 0===n?{}:n;Me()||s(!1);let{basename:a,navigator:o}=t.useContext(Re),{hash:l,pathname:i,search:u}=je(e,{relative:r}),c=i;return"/"!==a&&(c="/"===i?a:M([a,i])),o.createHref({pathname:c,search:u,hash:l})}(d,{relative:o}),b=function(e,n){let{target:r,replace:a,state:o,preventScrollReset:l,relative:i,unstable_viewTransition:u}=void 0===n?{}:n,s=Ie(),c=Fe(),d=je(e,{relative:i});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:p(c)===p(d);s(e,{replace:n,state:o,preventScrollReset:l,relative:i,unstable_viewTransition:u})}}),[c,s,d,a,o,r,e,l,i,u])}(d,{replace:i,state:u,target:c,preventScrollReset:f,relative:o,unstable_viewTransition:h});return t.createElement("a",Ge({},m,{href:r||y,onClick:g||l?a:function(e){a&&a(e),e.defaultPrevented||b(e)},ref:n,target:c}))}));var pt,ht;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(pt||(pt={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(ht||(ht={}));var mt=a(379),vt=a.n(mt),gt=a(795),yt=a.n(gt),bt=a(569),wt=a.n(bt),At=a(565),Ct=a.n(At),kt=a(216),St=a.n(kt),Et=a(589),xt=a.n(Et),_t=a(777),Pt={};Pt.styleTagTransform=xt(),Pt.setAttributes=Ct(),Pt.insert=wt().bind(null,"head"),Pt.domAPI=yt(),Pt.insertStyleElement=St(),vt()(_t.Z,Pt),_t.Z&&_t.Z.locals&&_t.Z.locals;var Bt=a(30),Tt={};Tt.styleTagTransform=xt(),Tt.setAttributes=Ct(),Tt.insert=wt().bind(null,"head"),Tt.domAPI=yt(),Tt.insertStyleElement=St(),vt()(Bt.Z,Tt);const zt=Bt.Z&&Bt.Z.locals?Bt.Z.locals:void 0;function Lt(e){var n=e.userName;return e.logOutPackage,t.createElement("div",{className:"is-logged-in-container"},t.createElement("div",{className:"active-user-name"},n||"McPoopy Pants"),t.createElement("p",null,"You are currently logged in.",t.createElement("span",{onClick:void 0},"Log out?")))}function Rt(e){var n=e.loginStatus,r=e.loginPackage,a=e.logOutPackage,o=r.userName;return t.createElement("div",{className:zt.headerContainer},t.createElement("div",{className:zt.headerTitle},"SpinConnect"),t.createElement("div",{className:zt.loginStatusContainer},n?t.createElement(Lt,{userName:o,logOutPackage:a}):t.createElement(ft,{to:"/login"})))}var Nt=a(194),Dt={};Dt.styleTagTransform=xt(),Dt.setAttributes=Ct(),Dt.insert=wt().bind(null,"head"),Dt.domAPI=yt(),Dt.insertStyleElement=St(),vt()(Nt.Z,Dt);const Ot=Nt.Z&&Nt.Z.locals?Nt.Z.locals:void 0;var Mt=a(930),Ft={};function Ut(e){return e.userPackage,e.media,t.createElement(t.Fragment,null)}function It(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function jt(e){var n,r,a=(n=(0,t.useState)({}),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(n,r)||function(e,t){if(e){if("string"==typeof e)return It(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?It(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[0],l=(a[1],e.userPackage);return t.createElement("div",{className:Ot.appMgmtContainer},t.createElement("div",{className:Ot.mgmtOperationsContainer},t.createElement("div",{className:Ot.appMgmt},t.createElement("div",{className:Ot.mgmtPreview},t.createElement("p",null,"Management"),t.createElement("div",{className:Ot.mgmtOptionsContainer},t.createElement("div",{className:Ot.activeOptions},t.createElement("p",null,"Some other active options")),t.createElement("div",{className:Ot.inactiveOptions},t.createElement("p",null,"List of available media sources to pull data from"))))),t.createElement("div",{className:Ot.mgmtControls},t.createElement("div",{className:Ot.mgmtPreview},t.createElement("p",null,"Controls"),t.createElement("div",{className:Ot.mgmtOptionsContainer},t.createElement("div",{className:Ot.activeOptions},t.createElement("button",{className:Ot.spinUpBtn},"Spin Up Collection")),t.createElement("div",{className:Ot.inactiveOptions},t.createElement("p",null,"Search options")))))),t.createElement("div",{className:Ot.collectionContainer},t.createElement(Ut,{userPackage:l,media:o})))}Ft.styleTagTransform=xt(),Ft.setAttributes=Ct(),Ft.insert=wt().bind(null,"head"),Ft.domAPI=yt(),Ft.insertStyleElement=St(),vt()(Mt.Z,Ft),Mt.Z&&Mt.Z.locals&&Mt.Z.locals;var Ht="".concat("/api/v1","/spin_collect"),Wt="".concat(Ht,"/user/login_user");function Vt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return $t(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$t(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Qt={USER_NAME:"bucketLimited",USER_TOKEN:"password123"};function qt(){var e=Vt((0,t.useState)(!0),2),n=e[0],r=e[1],a=Vt((0,t.useState)(Qt),2),o=a[0],l=a[1];return t.createElement("div",{style:{display:"grid",gridTemplateRows:"[Header] 10rem [AppMgmt]\tcalc(100vh - 10rem)"}},t.createElement(Rt,{logOutPackage:{setLoginStatus:r,setUserPackage:l},loginStatus:n,loginPackage:{userPackage:o,setUserPackage:l,loginRoute:Wt}}),t.createElement(jt,{userPackage:o}))}var Yt=a(542),Zt={};function Kt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Xt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Xt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Jt(e){var n=e.loginPackage,r=Kt((0,t.useState)(""),2),a=r[0],o=r[1],l=Kt((0,t.useState)(""),2),i=l[0],u=l[1],s=Kt((0,t.useState)([]),2),c=s[0],d=s[1],f=(n.userPackage,n.setUserPackage),p=n.loginRoute,h=function(e){switch(e.target.name){case"name":o(e.target.value);break;case"password":u(e.target.value)}};return(0,t.useEffect)((function(){}),[]),t.createElement("form",{className:"spinConnect-login-portal-container",onSubmit:function(e){e.preventDefault();var t={name:a,loggedIn:!0};a?i?fetch(p).then((function(e){200===e.status?f(t):d([e.statusText])})).catch((function(e){d([e.message])})):d(["Please enter your password."]):d(["Please enter your name."])}},t.createElement("input",{type:"text",name:"name",placeholder:"User name",autoComplete:"off",onChange:h}),t.createElement("input",{type:"text",name:"password",placeholder:"password",autoComplete:"off",onChange:h}),t.createElement("input",{type:"submit",value:"Submit"}),c.map((function(e,n){return t.createElement("p",{key:n},e)})))}Zt.styleTagTransform=xt(),Zt.setAttributes=Ct(),Zt.insert=wt().bind(null,"head"),Zt.domAPI=yt(),Zt.insertStyleElement=St(),vt()(Yt.Z,Zt),Yt.Z&&Yt.Z.locals&&Yt.Z.locals;var Gt=a(567),en={container:{display:"flex","flex-direction":"column","align-items":"center",width:"90%",margin:"3rem auto",border:"0.25rem solid #a4d822","border-radius":"1rem","font-size":"2.5rem"},image:{height:"40rem","margin-top":"1rem","border-radius":".5rem"},error:{display:"flex","align-items":"center","justify-content":"center",margin:"2rem auto",border:".2rem solid black","background-color":"#c6c4c4d1",width:"80%",height:"10rem","text-align":"center","overflow-x":"scroll",padding:"0.2rem"}};function tn(){var e=Ke();return t.createElement("div",{style:en.container},t.createElement("img",{style:en.image,src:Gt,alt:"Error, Will Robinson!"}),t.createElement("h1",null,"Error, Will Robinson!"),t.createElement("p",null,"An enexpected error has occured:"),t.createElement("p",{style:en.error},t.createElement("i",null,e.statusText||e.message)))}var nn,rn=(nn=[{path:"/",element:t.createElement(qt,null),errorElement:t.createElement(tn,null)},{path:"/login",element:t.createElement(Jt,null)}],function(t){const n=t.window?t.window:"undefined"!=typeof window?window:void 0,r=void 0!==n&&void 0!==n.document&&void 0!==n.document.createElement,a=!r;let o;if(s(t.routes.length>0,"You must provide a non-empty routes array to createRouter"),t.mapRouteProperties)o=t.mapRouteProperties;else if(t.detectErrorBoundary){let e=t.detectErrorBoundary;o=t=>({hasErrorBoundary:e(t)})}else o=G;let l,u,d={},p=g(t.routes,o,void 0,d),h=t.basename||"/",v=i({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1},t.future),b=null,w=new Set,A=null,C=null,k=null,S=null!=t.hydrationData,E=y(p,t.history.location,h),x=null;if(null==E){let e=me(404,{pathname:t.history.location.pathname}),{matches:n,route:r}=he(p);E=n,x={[r.id]:e}}let _,P=E.some((e=>e.route.lazy)),B=E.some((e=>e.route.loader));if(P)u=!1;else if(B)if(v.v7_partialHydration){let e=t.hydrationData?t.hydrationData.loaderData:null,n=t.hydrationData?t.hydrationData.errors:null;u=E.every((t=>t.route.loader&&!0!==t.route.loader.hydrate&&(e&&void 0!==e[t.route.id]||n&&void 0!==n[t.route.id])))}else u=null!=t.hydrationData;else u=!0;let T,z={historyAction:t.history.action,location:t.history.location,matches:E,initialized:u,navigation:Z,restoreScrollPosition:null==t.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:t.hydrationData&&t.hydrationData.loaderData||{},actionData:t.hydrationData&&t.hydrationData.actionData||null,errors:t.hydrationData&&t.hydrationData.errors||x,fetchers:new Map,blockers:new Map},R=e.Pop,N=!1,D=!1,O=new Map,M=null,F=!1,U=!1,I=[],j=[],H=new Map,W=0,V=-1,$=new Map,Q=new Set,q=new Map,ae=new Map,oe=new Set,le=new Map,se=new Map,ce=!1;function ge(e,t){void 0===t&&(t={}),z=i({},z,e);let n=[],r=[];v.v7_fetcherPersist&&z.fetchers.forEach(((e,t)=>{"idle"===e.state&&(oe.has(t)?r.push(t):n.push(t))})),[...w].forEach((e=>e(z,{deletedFetchers:r,unstable_viewTransitionOpts:t.viewTransitionOpts,unstable_flushSync:!0===t.flushSync}))),v.v7_fetcherPersist&&(n.forEach((e=>z.fetchers.delete(e))),r.forEach((e=>Me(e))))}function Se(n,r,a){var o,u;let s,{flushSync:c}=void 0===a?{}:a,d=null!=z.actionData&&null!=z.navigation.formMethod&&Ae(z.navigation.formMethod)&&"loading"===z.navigation.state&&!0!==(null==(o=n.state)?void 0:o._isRedirect);s=r.actionData?Object.keys(r.actionData).length>0?r.actionData:null:d?z.actionData:null;let f=r.loaderData?fe(z.loaderData,r.loaderData,r.matches||[],r.errors):z.loaderData,h=z.blockers;h.size>0&&(h=new Map(h),h.forEach(((e,t)=>h.set(t,X))));let m,v=!0===N||null!=z.navigation.formMethod&&Ae(z.navigation.formMethod)&&!0!==(null==(u=n.state)?void 0:u._isRedirect);if(l&&(p=l,l=void 0),F||R===e.Pop||(R===e.Push?t.history.push(n,n.state):R===e.Replace&&t.history.replace(n,n.state)),R===e.Pop){let e=O.get(z.location.pathname);e&&e.has(n.pathname)?m={currentLocation:z.location,nextLocation:n}:O.has(n.pathname)&&(m={currentLocation:n,nextLocation:z.location})}else if(D){let e=O.get(z.location.pathname);e?e.add(n.pathname):(e=new Set([n.pathname]),O.set(z.location.pathname,e)),m={currentLocation:z.location,nextLocation:n}}ge(i({},r,{actionData:s,loaderData:f,historyAction:R,location:n,initialized:!0,navigation:Z,revalidation:"idle",restoreScrollPosition:qe(n,r.matches||z.matches),preventScrollReset:v,blockers:h}),{viewTransitionOpts:m,flushSync:!0===c}),R=e.Pop,N=!1,D=!1,F=!1,U=!1,I=[],j=[]}async function Te(n,r,a){T&&T.abort(),T=null,R=n,F=!0===(a&&a.startUninterruptedRevalidation),function(e,t){if(A&&k){let n=Qe(e,t);A[n]=k()}}(z.location,z.matches),N=!0===(a&&a.preventScrollReset),D=!0===(a&&a.enableViewTransition);let u=l||p,s=a&&a.overrideNavigation,c=y(u,r,h),f=!0===(a&&a.flushSync);if(!c){let e=me(404,{pathname:r.pathname}),{matches:t,route:n}=he(u);return $e(),void Se(r,{matches:t,loaderData:{},errors:{[n.id]:e}},{flushSync:f})}if(z.initialized&&!U&&(g=z.location,b=r,g.pathname===b.pathname&&g.search===b.search&&(""===g.hash?""!==b.hash:g.hash===b.hash||""!==b.hash))&&!(a&&a.submission&&Ae(a.submission.formMethod)))return void Se(r,{matches:c},{flushSync:f});var g,b;T=new AbortController;let w,C,S=ue(t.history,r,T.signal,a&&a.submission);if(a&&a.pendingError)C={[pe(c).route.id]:a.pendingError};else if(a&&a.submission&&Ae(a.submission.formMethod)){let t=await async function(t,n,r,a,l){void 0===l&&(l={}),Re();let i,u=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(n,r);ge({navigation:u},{flushSync:!0===l.flushSync});let s=Ee(a,n);if(s.route.action||s.route.lazy){if(i=await ie("action",t,s,a,d,o,h,v.v7_relativeSplatPath),t.signal.aborted)return{shortCircuited:!0}}else i={type:m.error,error:me(405,{method:t.method,pathname:n.pathname,routeId:s.route.id})};if(we(i)){let e;return e=l&&null!=l.replace?l.replace:i.location===z.location.pathname+z.location.search,await ze(z,i,{submission:r,replace:e}),{shortCircuited:!0}}if(be(i)){let t=pe(a,s.route.id);return!0!==(l&&l.replace)&&(R=e.Push),{pendingActionData:{},pendingActionError:{[t.route.id]:i.error}}}if(ye(i))throw me(400,{type:"defer-action"});return{pendingActionData:{[s.route.id]:i.data}}}(S,r,a.submission,c,{replace:a.replace,flushSync:f});if(t.shortCircuited)return;w=t.pendingActionData,C=t.pendingActionError,s=_e(r,a.submission),f=!1,S=new Request(S.url,{signal:S.signal})}let{shortCircuited:E,loaderData:x,errors:_}=await async function(e,n,r,a,o,u,s,c,d,f,m){let g=a||_e(n,o),y=o||u||xe(g),b=l||p,[w,A]=re(t.history,z,r,y,n,v.v7_partialHydration&&!0===c,U,I,j,oe,q,Q,b,h,f,m);if($e((e=>!(r&&r.some((t=>t.route.id===e)))||w&&w.some((t=>t.route.id===e)))),V=++W,0===w.length&&0===A.length){let e=Ie();return Se(n,i({matches:r,loaderData:{},errors:m||null},f?{actionData:f}:{},e?{fetchers:new Map(z.fetchers)}:{}),{flushSync:d}),{shortCircuited:!0}}if(!(F||v.v7_partialHydration&&c)){A.forEach((e=>{let t=z.fetchers.get(e.key),n=Pe(void 0,t?t.data:void 0);z.fetchers.set(e.key,n)}));let e=f||z.actionData;ge(i({navigation:g},e?0===Object.keys(e).length?{actionData:null}:{actionData:e}:{},A.length>0?{fetchers:new Map(z.fetchers)}:{}),{flushSync:d})}A.forEach((e=>{H.has(e.key)&&Fe(e.key),e.controller&&H.set(e.key,e.controller)}));let C=()=>A.forEach((e=>Fe(e.key)));T&&T.signal.addEventListener("abort",C);let{results:k,loaderResults:S,fetcherResults:E}=await Le(z.matches,r,w,A,e);if(e.signal.aborted)return{shortCircuited:!0};T&&T.signal.removeEventListener("abort",C),A.forEach((e=>H.delete(e.key)));let x=ve(k);if(x){if(x.idx>=w.length){let e=A[x.idx-w.length].key;Q.add(e)}return await ze(z,x.result,{replace:s}),{shortCircuited:!0}}let{loaderData:_,errors:P}=de(z,r,w,S,m,A,E,le);le.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&le.delete(t)}))}));let B=Ie(),L=je(V);return i({loaderData:_,errors:P},B||L||A.length>0?{fetchers:new Map(z.fetchers)}:{})}(S,r,c,s,a&&a.submission,a&&a.fetcherSubmission,a&&a.replace,a&&!0===a.initialHydration,f,w,C);E||(T=null,Se(r,i({matches:c},w?{actionData:w}:{},{loaderData:x,errors:_})))}async function ze(a,o,l){let{submission:u,fetcherSubmission:c,replace:d}=void 0===l?{}:l;o.revalidate&&(U=!0);let p=f(a.location,o.location,{_isRedirect:!0});if(s(p,"Expected a location on the redirect navigation"),r){let e=!1;if(o.reloadDocument)e=!0;else if(J.test(o.location)){const r=t.history.createURL(o.location);e=r.origin!==n.location.origin||null==L(r.pathname,h)}if(e)return void(d?n.location.replace(o.location):n.location.assign(o.location))}T=null;let m=!0===d?e.Replace:e.Push,{formMethod:v,formAction:g,formEncType:y}=a.navigation;!u&&!c&&v&&g&&y&&(u=xe(a.navigation));let b=u||c;if(Y.has(o.status)&&b&&Ae(b.formMethod))await Te(m,p,{submission:i({},b,{formAction:o.location}),preventScrollReset:N});else{let e=_e(p,u);await Te(m,p,{overrideNavigation:e,fetcherSubmission:c,preventScrollReset:N})}}async function Le(e,n,r,a,l){let i=await Promise.all([...r.map((e=>ie("loader",l,e,n,d,o,h,v.v7_relativeSplatPath))),...a.map((e=>e.matches&&e.match&&e.controller?ie("loader",ue(t.history,e.path,e.controller.signal),e.match,e.matches,d,o,h,v.v7_relativeSplatPath):{type:m.error,error:me(404,{pathname:e.path})}))]),u=i.slice(0,r.length),s=i.slice(r.length);return await Promise.all([Ce(e,r,u,u.map((()=>l.signal)),!1,z.loaderData),Ce(e,a.map((e=>e.match)),s,a.map((e=>e.controller?e.controller.signal:null)),!0)]),{results:i,loaderResults:u,fetcherResults:s}}function Re(){U=!0,I.push(...$e()),q.forEach(((e,t)=>{H.has(t)&&(j.push(t),Fe(t))}))}function Ne(e,t,n){void 0===n&&(n={}),z.fetchers.set(e,t),ge({fetchers:new Map(z.fetchers)},{flushSync:!0===(n&&n.flushSync)})}function De(e,t,n,r){void 0===r&&(r={});let a=pe(z.matches,t);Me(e),ge({errors:{[a.route.id]:n},fetchers:new Map(z.fetchers)},{flushSync:!0===(r&&r.flushSync)})}function Oe(e){return v.v7_fetcherPersist&&(ae.set(e,(ae.get(e)||0)+1),oe.has(e)&&oe.delete(e)),z.fetchers.get(e)||K}function Me(e){let t=z.fetchers.get(e);!H.has(e)||t&&"loading"===t.state&&$.has(e)||Fe(e),q.delete(e),$.delete(e),Q.delete(e),oe.delete(e),z.fetchers.delete(e)}function Fe(e){let t=H.get(e);s(t,"Expected fetch controller: "+e),t.abort(),H.delete(e)}function Ue(e){for(let t of e){let e=Be(Oe(t).data);z.fetchers.set(t,e)}}function Ie(){let e=[],t=!1;for(let n of Q){let r=z.fetchers.get(n);s(r,"Expected fetcher: "+n),"loading"===r.state&&(Q.delete(n),e.push(n),t=!0)}return Ue(e),t}function je(e){let t=[];for(let[n,r]of $)if(r<e){let e=z.fetchers.get(n);s(e,"Expected fetcher: "+n),"loading"===e.state&&(Fe(n),$.delete(n),t.push(n))}return Ue(t),t.length>0}function He(e){z.blockers.delete(e),se.delete(e)}function We(e,t){let n=z.blockers.get(e)||X;s("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,"Invalid blocker state transition: "+n.state+" -> "+t.state);let r=new Map(z.blockers);r.set(e,t),ge({blockers:r})}function Ve(e){let{currentLocation:t,nextLocation:n,historyAction:r}=e;if(0===se.size)return;se.size>1&&c(!1,"A router only supports one blocker at a time");let a=Array.from(se.entries()),[o,l]=a[a.length-1],i=z.blockers.get(o);return i&&"proceeding"===i.state?void 0:l({currentLocation:t,nextLocation:n,historyAction:r})?o:void 0}function $e(e){let t=[];return le.forEach(((n,r)=>{e&&!e(r)||(n.cancel(),t.push(r),le.delete(r))})),t}function Qe(e,t){return C&&C(e,t.map((e=>function(e,t){let{route:n,pathname:r,params:a}=e;return{id:n.id,pathname:r,params:a,data:t[n.id],handle:n.handle}}(e,z.loaderData))))||e.key}function qe(e,t){if(A){let n=Qe(e,t),r=A[n];if("number"==typeof r)return r}return null}return _={get basename(){return h},get future(){return v},get state(){return z},get routes(){return p},get window(){return n},initialize:function(){if(b=t.history.listen((e=>{let{action:n,location:r,delta:a}=e;if(ce)return void(ce=!1);c(0===se.size||null!=a,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let o=Ve({currentLocation:z.location,nextLocation:r,historyAction:n});return o&&null!=a?(ce=!0,t.history.go(-1*a),void We(o,{state:"blocked",location:r,proceed(){We(o,{state:"proceeding",proceed:void 0,reset:void 0,location:r}),t.history.go(a)},reset(){let e=new Map(z.blockers);e.set(o,X),ge({blockers:e})}})):Te(n,r)})),r){!function(e,t){try{let n=e.sessionStorage.getItem(ee);if(n){let e=JSON.parse(n);for(let[n,r]of Object.entries(e||{}))r&&Array.isArray(r)&&t.set(n,new Set(r||[]))}}catch(e){}}(n,O);let e=()=>function(e,t){if(t.size>0){let n={};for(let[e,r]of t)n[e]=[...r];try{e.sessionStorage.setItem(ee,JSON.stringify(n))}catch(e){c(!1,"Failed to save applied view transitions in sessionStorage ("+e+").")}}}(n,O);n.addEventListener("pagehide",e),M=()=>n.removeEventListener("pagehide",e)}return z.initialized||Te(e.Pop,z.location,{initialHydration:!0}),_},subscribe:function(e){return w.add(e),()=>w.delete(e)},enableScrollRestoration:function(e,t,n){if(A=e,k=t,C=n||null,!S&&z.navigation===Z){S=!0;let e=qe(z.location,z.matches);null!=e&&ge({restoreScrollPosition:e})}return()=>{A=null,k=null,C=null}},navigate:async function n(r,a){if("number"==typeof r)return void t.history.go(r);let o=te(z.location,z.matches,h,v.v7_prependBasename,r,v.v7_relativeSplatPath,null==a?void 0:a.fromRouteId,null==a?void 0:a.relative),{path:l,submission:u,error:s}=ne(v.v7_normalizeFormMethod,!1,o,a),c=z.location,d=f(z.location,l,a&&a.state);d=i({},d,t.history.encodeLocation(d));let p=a&&null!=a.replace?a.replace:void 0,m=e.Push;!0===p?m=e.Replace:!1===p||null!=u&&Ae(u.formMethod)&&u.formAction===z.location.pathname+z.location.search&&(m=e.Replace);let g=a&&"preventScrollReset"in a?!0===a.preventScrollReset:void 0,y=!0===(a&&a.unstable_flushSync),b=Ve({currentLocation:c,nextLocation:d,historyAction:m});if(!b)return await Te(m,d,{submission:u,pendingError:s,preventScrollReset:g,replace:a&&a.replace,enableViewTransition:a&&a.unstable_viewTransition,flushSync:y});We(b,{state:"blocked",location:d,proceed(){We(b,{state:"proceeding",proceed:void 0,reset:void 0,location:d}),n(r,a)},reset(){let e=new Map(z.blockers);e.set(b,X),ge({blockers:e})}})},fetch:function(e,n,r,i){if(a)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");H.has(e)&&Fe(e);let u=!0===(i&&i.unstable_flushSync),c=l||p,f=te(z.location,z.matches,h,v.v7_prependBasename,r,v.v7_relativeSplatPath,n,null==i?void 0:i.relative),m=y(c,f,h);if(!m)return void De(e,n,me(404,{pathname:f}),{flushSync:u});let{path:g,submission:b,error:w}=ne(v.v7_normalizeFormMethod,!0,f,i);if(w)return void De(e,n,w,{flushSync:u});let A=Ee(m,g);N=!0===(i&&i.preventScrollReset),b&&Ae(b.formMethod)?async function(e,n,r,a,i,u,c){if(Re(),q.delete(e),!a.route.action&&!a.route.lazy){let t=me(405,{method:c.formMethod,pathname:r,routeId:n});return void De(e,n,t,{flushSync:u})}let f=z.fetchers.get(e);Ne(e,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(c,f),{flushSync:u});let m=new AbortController,g=ue(t.history,r,m.signal,c);H.set(e,m);let b=W,w=await ie("action",g,a,i,d,o,h,v.v7_relativeSplatPath);if(g.signal.aborted)return void(H.get(e)===m&&H.delete(e));if(v.v7_fetcherPersist&&oe.has(e)){if(we(w)||be(w))return void Ne(e,Be(void 0))}else{if(we(w))return H.delete(e),V>b?void Ne(e,Be(void 0)):(Q.add(e),Ne(e,Pe(c)),ze(z,w,{fetcherSubmission:c}));if(be(w))return void De(e,n,w.error)}if(ye(w))throw me(400,{type:"defer-action"});let A=z.navigation.location||z.location,C=ue(t.history,A,m.signal),k=l||p,S="idle"!==z.navigation.state?y(k,z.navigation.location,h):z.matches;s(S,"Didn't find any matches after fetcher action");let E=++W;$.set(e,E);let x=Pe(c,w.data);z.fetchers.set(e,x);let[_,P]=re(t.history,z,S,c,A,!1,U,I,j,oe,q,Q,k,h,{[a.route.id]:w.data},void 0);P.filter((t=>t.key!==e)).forEach((e=>{let t=e.key,n=z.fetchers.get(t),r=Pe(void 0,n?n.data:void 0);z.fetchers.set(t,r),H.has(t)&&Fe(t),e.controller&&H.set(t,e.controller)})),ge({fetchers:new Map(z.fetchers)});let B=()=>P.forEach((e=>Fe(e.key)));m.signal.addEventListener("abort",B);let{results:L,loaderResults:N,fetcherResults:D}=await Le(z.matches,S,_,P,C);if(m.signal.aborted)return;m.signal.removeEventListener("abort",B),$.delete(e),H.delete(e),P.forEach((e=>H.delete(e.key)));let O=ve(L);if(O){if(O.idx>=_.length){let e=P[O.idx-_.length].key;Q.add(e)}return ze(z,O.result)}let{loaderData:M,errors:F}=de(z,z.matches,_,N,void 0,P,D,le);if(z.fetchers.has(e)){let t=Be(w.data);z.fetchers.set(e,t)}je(E),"loading"===z.navigation.state&&E>V?(s(R,"Expected pending action"),T&&T.abort(),Se(z.navigation.location,{matches:S,loaderData:M,errors:F,fetchers:new Map(z.fetchers)})):(ge({errors:F,loaderData:fe(z.loaderData,M,S,F),fetchers:new Map(z.fetchers)}),U=!1)}(e,n,g,A,m,u,b):(q.set(e,{routeId:n,path:g}),async function(e,n,r,a,l,i,u){let c=z.fetchers.get(e);Ne(e,Pe(u,c?c.data:void 0),{flushSync:i});let f=new AbortController,p=ue(t.history,r,f.signal);H.set(e,f);let m=W,g=await ie("loader",p,a,l,d,o,h,v.v7_relativeSplatPath);if(ye(g)&&(g=await ke(g,p.signal,!0)||g),H.get(e)===f&&H.delete(e),!p.signal.aborted){if(!oe.has(e))return we(g)?V>m?void Ne(e,Be(void 0)):(Q.add(e),void await ze(z,g)):void(be(g)?De(e,n,g.error):(s(!ye(g),"Unhandled fetcher deferred data"),Ne(e,Be(g.data))));Ne(e,Be(void 0))}}(e,n,g,A,m,u,b))},revalidate:function(){Re(),ge({revalidation:"loading"}),"submitting"!==z.navigation.state&&("idle"!==z.navigation.state?Te(R||z.historyAction,z.navigation.location,{overrideNavigation:z.navigation}):Te(z.historyAction,z.location,{startUninterruptedRevalidation:!0}))},createHref:e=>t.history.createHref(e),encodeLocation:e=>t.history.encodeLocation(e),getFetcher:Oe,deleteFetcher:function(e){if(v.v7_fetcherPersist){let t=(ae.get(e)||0)-1;t<=0?(ae.delete(e),oe.add(e)):ae.set(e,t)}else Me(e);ge({fetchers:new Map(z.fetchers)})},dispose:function(){b&&b(),M&&M(),w.clear(),T&&T.abort(),z.fetchers.forEach(((e,t)=>Me(t))),z.blockers.forEach(((e,t)=>He(t)))},getBlocker:function(e,t){let n=z.blockers.get(e)||X;return se.get(e)!==t&&se.set(e,t),n},deleteBlocker:He,_internalFetchControllers:H,_internalActiveDeferreds:le,_internalSetRoutes:function(e){d={},l=g(e,o,void 0,d)}},_}({basename:void 0,future:Ge({},void 0,{v7_prependBasename:!0}),history:function(t){return void 0===t&&(t={}),function(t,n,r,a){void 0===a&&(a={});let{window:o=document.defaultView,v5Compat:l=!1}=a,c=o.history,h=e.Pop,m=null,v=g();function g(){return(c.state||{idx:null}).idx}function y(){h=e.Pop;let t=g(),n=null==t?null:t-v;v=t,m&&m({action:h,location:w.location,delta:n})}function b(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:p(e);return s(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==v&&(v=0,c.replaceState(i({},c.state,{idx:v}),""));let w={get action(){return h},get location(){return t(o,c)},listen(e){if(m)throw new Error("A history only accepts one active listener");return o.addEventListener(u,y),m=e,()=>{o.removeEventListener(u,y),m=null}},createHref:e=>n(o,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){h=e.Push;let a=f(w.location,t,n);r&&r(a,t),v=g()+1;let i=d(a,v),u=w.createHref(a);try{c.pushState(i,"",u)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(u)}l&&m&&m({action:h,location:w.location,delta:1})},replace:function(t,n){h=e.Replace;let a=f(w.location,t,n);r&&r(a,t),v=g();let o=d(a,v),i=w.createHref(a);c.replaceState(o,"",i),l&&m&&m({action:h,location:w.location,delta:0})},go:e=>c.go(e)};return w}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return f("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:p(t)}),null,t)}({window:void 0}),hydrationData:function(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=Ge({},t,{errors:tt(t.errors)})),t}(),routes:nn,mapRouteProperties:function(e){let n={hasErrorBoundary:null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&Object.assign(n,{element:t.createElement(e.Component),Component:void 0}),e.HydrateFallback&&Object.assign(n,{hydrateFallbackElement:t.createElement(e.HydrateFallback),HydrateFallback:void 0}),e.ErrorBoundary&&Object.assign(n,{errorElement:t.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),n},window:void 0}).initialize()),an=document.getElementById("spinConnectRoot");(0,r.s)(an).render(t.createElement(t.StrictMode,null,t.createElement(ut,{router:rn})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,